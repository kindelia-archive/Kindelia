type Nat {
  zero{}
  succ{pred: Nat}
}

type Pair.Nat {
  new{fst: Nat, snd: Nat}
}

save

// -----------------------------------------------------------------------------

bond double(x: Nat): Nat {
  case x : Nat {
    zero: Nat@zero{}
    succ: Nat@succ{Nat@succ{double(x.pred)}}
  }
}

eval {
  double(double(Nat@succ{Nat@succ{Nat@succ{Nat@zero{}}}}))
} : Nat

save

// -----------------------------------------------------------------------------

bond count(): #word {
  #0
}

bond inc(): #word {
  bind count { #1 }
  #0
}

eval {
  bind count { +(count(), #1) }
  bind count { +(count(), #1) }
  bind count { +(count(), #1) }
  count()
} : #word
