type Nat {
  zero{}
  succ{pred: Nat}
}

type Pair.Nat {
  new{fst: Nat, snd: Nat}
}

save

// -----------------------------------------------------------------------------

bond double(x: Nat): Nat {
  case x : Nat {
    zero: Nat@zero{}
    succ: Nat@succ{Nat@succ{double(x.pred)}}
  }
}

eval {
  double(double(Nat@succ{Nat@succ{Nat@succ{Nat@zero{}}}}))
} : Nat

save

// -----------------------------------------------------------------------------

bond val(): #word {
  #0
}

bond inc(): #word {
  bind val { #add(val(), #1) }
  #0
}

eval {
  let a : #word = inc()
  let b : #word = inc()
  let c : #word = inc()
  val()
} : #word

save

// -----------------------------------------------------------------------------

bond PatoHasker(x: Nat): #word {
  case x : Nat {
    zero: #0
    succ: #1
  }
}

eval PatoHasker(Nat@succ{Nat@zero{}}) {
  val()
} : #word
  
save
