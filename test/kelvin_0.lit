// == Types ==

type Unit {
  new{}
}

type Bool {
  false{}
  true{}
}

type Bits {
  e{}
  o{pred: Bits}
  i{pred: Bits}
}

type Nat {
  zero{}
  succ{pred: Nat}
}

type Word.List {
  nil{}
  cons{head: #word, tail: Word.List}
}

type Buffer {
  new{
    size: #word
    words: Word.List
  }
}

save

// ====

// Bits

bond Bits.inc(x: Bits): Bits {
  case x : Bits {
    e: i{e{}}
    o: i{x.pred}
    i: o{Bits.inc(x.pred)}
  }
}

bond Bits.add(x: Bits, y: Bits): Bits {
  case y : Bits {
    e: e{}
    o:
      case x : Bits {
        e: y
        o: o{Bits.add(x.pred y.pred)}
        i: i{Bits.add(x.pred y.pred)}
      }
    i:
      case x : Bits {
        e: y
        o: i{Bits.add(x.pred y.pred)}
        i:
          let rest : Bits = Bits.add(x.pred y.pred)
          o{Bits.inc(rest)}
      }
  }
}

bond Bits.from_word(x: #word): Bits {
  compare x #0 {
    _<_: e{}
    _=_: e{}
    _>_:
      let bit : #word = %(x, #2)
      let rest : Bits = Bits.from_word(/(x, #2))
      compare bit #0 {
        _<_: e{}
        _=_: o{rest}
        _>_: i{rest}
      }
  }
}

bond Bits.concat(x: Bits, y: Bits): Bits {
  case x : Bits {
    e: y
    o: o{ Bits.concat(x.pred, y) }
    i: i{ Bits.concat(x.pred, y) }
  }
}

save

// Nat

bond Nat.to_bits(x: Nat): Bits {
  case x : Nat {
    zero: e{}
    succ: Bits.inc(Nat.to_bits(x.pred))
  }
}

bond Nat.double(x: Nat): Nat {
  case x : Nat {
    zero: zero{}
    succ: succ{succ{Nat.double(x.pred)}}
  }
}

save

// Buffer

bond shiftr(x: #word, y: #word): #word {
  compare y #0 {
    _<_: #0
    _=_: x
    _>_: shiftr(/(x #2), -(y #1))
  }
}

bond Buffer.from_bits.aux(
  x: Bits
  c: #word
  segment: #word
): Buffer {
  let msb : #word = -(-(#0 #1) /(-(#0 #1) #2))
  compare c #64 {
    _<_:
      case x: Bits {
        e:
          compare c #0 {
            _<_: new{#0, nil{}}
            _=_: new{#0, nil{}}
            _>_:
              let segment : #word = shiftr(segment, -(#64 c))
              new{c, cons{segment, nil{}}}
          }
        o:
          let c : #word = +(#1, c)
          let segment: #word = /(segment, #2)
          Buffer.from_bits.aux(x.pred, c, segment)
        i:
          let c : #word = +(#1, c)
          let segment: #word = +(msb /(segment, #2))
          Buffer.from_bits.aux(x.pred, c, segment)
      }
    _=_:
      let rest : Buffer = Buffer.from_bits.aux(x, #0, #0)
      case rest : Buffer {
        new:
          let size: #word = +(#64, rest.size)
          new{size, cons{segment, rest.words}}
      }
    _>_: new{#0, nil{}}
  }
}

bond Buffer.from_bits(x: Bits): Buffer {
  Buffer.from_bits.aux(x, #0, #0)
}

save

// == TESTS ==

// eval {
//   Bits.from_word(#12)
// } : Bits

eval {
  let a: Nat = succ{succ{succ{zero{}}}}
  let b: Nat = Nat.double(Nat.double(a))
  let bits: Bits = Nat.to_bits(Nat.double(Nat.double(a)))
  // let d: Bits = Bits.concat(c, c)
  let buf: Buffer = Buffer.from_bits(bits)
  buf
} : Buffer

save
