type Bool {
  true{}
  false{}
}

// add: "+", sub: "-", mul: "*", div: "/", mod: "%", or: "|", and: "&", xor: "^" 

bond shl(w: #word, n: #word): #word {
  compare n #0 {
    _<_:
      w
    _=_:
      w
    _>_:
      shl(#sub(w, #2), #sub(n, #1))
  }
}

bond shr(w: #word, n: #word): #word {
  compare n #0 {
    _<_:
      w
    _=_:
      w
    _>_:
      shl(#div(w, #2), #sub(n, #1))
  }
}

bond not(w: #word): #word {
  #xor(#18446744073709551615, w)
}

type Array {
  new{
    length: #word
    buffer: Buffer
  }
}

type Buffer {
  tip{
    value: #word
  }
  tie{
    left: Buffer
    right: Buffer
  }
}

type MaybeWord {
  none{}
  some{
    value: #word
  }
}

save

bond buffer_alloc(depth: #word): Buffer {
  compare depth #0 {
    _<_:
      Buffer@tip{#0} // never happens
    _=_:
      Buffer@tip{#0}
    _>_:
      let buf : Buffer = buffer_alloc(#sub(depth, #1))
      Buffer@tie{buf, buf}
  }
}

bond check_integrity(buf: Buffer): MaybeWord {
  case buf : Buffer {
    tip:
      MaybeWord@some{#0}
    tie:
      let left_ok : MaybeWord = check_integrity(buf.left)
      case left_ok : MaybeWord {
        none:
          MaybeWord@none{}
        some:
          let right_ok : MaybeWord = check_integrity(buf.right)
          case right_ok : MaybeWord {
            none:
              MaybeWord@none{}
            some:
              compare left_ok.value right_ok.value {
                _<_:
                  MaybeWord@none{}
                _=_:
                  MaybeWord@some{#add(left_ok.value, #1)}
                _>_:
                  MaybeWord@none{}
              }
          }
      }
  }
}

bond buffer_get(idx: #word, buf: Buffer): #word {
  case buf : Buffer {
    tip:
      buf.value
    tie:
      compare #and(idx, #1) #0 {
        _<_:
          #0 // never happens
        _=_:
          buffer_get(#div(idx, #2), buf.left)
        _>_:
          buffer_get(#div(idx, #2), buf.right)
      }
  }
}

bond buffer_set(idx: #word, value: #word, buf: Buffer): Buffer {
  case buf: Buffer {
    tip:
      Buffer@tip{value}
    tie:
      compare #and(idx, #1) #0 {
        _<_:
          Buffer@tip{#0} // never happpens
        _=_:
          let ok : Buffer = buffer_set(#div(idx, #2), value, buf.left)
          Buffer@tie{ok, buf.right}
        _>_:
          Buffer@tie{buf.left, buffer_set(#div(idx, #2), value, buf.right)}
      }
  }
}

bond Crypto.Keccak.RC(): Buffer {
  let arr : Buffer = buffer_alloc(#6)
  let arr : Buffer = buffer_set(#0,  #1,          arr)
  let arr : Buffer = buffer_set(#1,  #0,          arr)
  let arr : Buffer = buffer_set(#2,  #32898,      arr)
  let arr : Buffer = buffer_set(#3,  #0,          arr)
  let arr : Buffer = buffer_set(#4,  #32906,      arr)
  let arr : Buffer = buffer_set(#5,  #2147483648, arr)
  let arr : Buffer = buffer_set(#6,  #2147516416, arr)
  let arr : Buffer = buffer_set(#7,  #2147483648, arr)
  let arr : Buffer = buffer_set(#8,  #32907,      arr)
  let arr : Buffer = buffer_set(#9,  #0,          arr)
  let arr : Buffer = buffer_set(#10, #2147483649, arr)
  let arr : Buffer = buffer_set(#11, #0,          arr)
  let arr : Buffer = buffer_set(#12, #2147516545, arr)
  let arr : Buffer = buffer_set(#13, #2147483648, arr)
  let arr : Buffer = buffer_set(#14, #32777,      arr)
  let arr : Buffer = buffer_set(#15, #2147483648, arr)
  let arr : Buffer = buffer_set(#16, #138,        arr)
  let arr : Buffer = buffer_set(#17, #0,          arr)
  let arr : Buffer = buffer_set(#18, #136,        arr)
  let arr : Buffer = buffer_set(#19, #0,          arr)
  let arr : Buffer = buffer_set(#20, #2147516425, arr)
  let arr : Buffer = buffer_set(#21, #0,          arr)
  let arr : Buffer = buffer_set(#22, #2147483658, arr)
  let arr : Buffer = buffer_set(#23, #0,          arr)
  let arr : Buffer = buffer_set(#24, #2147516555, arr)
  let arr : Buffer = buffer_set(#25, #0,          arr)
  let arr : Buffer = buffer_set(#26, #139,        arr)
  let arr : Buffer = buffer_set(#27, #2147483648, arr)
  let arr : Buffer = buffer_set(#28, #32905,      arr)
  let arr : Buffer = buffer_set(#29, #2147483648, arr)
  let arr : Buffer = buffer_set(#30, #32771,      arr)
  let arr : Buffer = buffer_set(#31, #2147483648, arr)
  let arr : Buffer = buffer_set(#32, #32770,      arr)
  let arr : Buffer = buffer_set(#33, #2147483648, arr)
  let arr : Buffer = buffer_set(#34, #128,        arr)
  let arr : Buffer = buffer_set(#35, #2147483648, arr)
  let arr : Buffer = buffer_set(#36, #32778,      arr)
  let arr : Buffer = buffer_set(#37, #0,          arr)
  let arr : Buffer = buffer_set(#38, #2147483658, arr)
  let arr : Buffer = buffer_set(#39, #2147483648, arr)
  let arr : Buffer = buffer_set(#40, #2147516545, arr)
  let arr : Buffer = buffer_set(#41, #2147483648, arr)
  let arr : Buffer = buffer_set(#42, #32896,      arr)
  let arr : Buffer = buffer_set(#43, #2147483648, arr)
  let arr : Buffer = buffer_set(#44, #2147483649, arr)
  let arr : Buffer = buffer_set(#45, #0,          arr)
  let arr : Buffer = buffer_set(#46, #2147516424, arr)
  let arr : Buffer = buffer_set(#47, #2147483648, arr)
  arr
}

bond keccak.f.go(i: #word, buf: Buffer) : Buffer {
  compare i #24 {
    _<_:
      let c0c1 : #word = #xor(
        buffer_get(#0, buf), #xor(buffer_get(#5, buf), #xor(buffer_get(#10, buf),
        #xor(buffer_get(#15, buf), buffer_get(#20, buf)))))
      let c2c3 : #word = #xor(
        buffer_get(#1, buf), #xor(buffer_get(#6, buf), #xor(buffer_get(#11, buf),
        #xor(buffer_get(#16, buf), buffer_get(#21, buf)))))
      let c4c5 : #word = #xor(
        buffer_get(#2, buf), #xor(buffer_get(#7, buf), #xor(buffer_get(#12, buf),
        #xor(buffer_get(#17, buf), buffer_get(#22, buf)))))
      let c6c7 : #word = #xor(
        buffer_get(#3, buf), #xor(buffer_get(#8, buf), #xor(buffer_get(#13, buf),
        #xor(buffer_get(#18, buf), buffer_get(#23, buf)))))
      let c8c9 : #word = #xor(
        buffer_get(#4, buf), #xor(buffer_get(#9, buf), #xor(buffer_get(#14, buf),
        #xor(buffer_get(#19, buf), buffer_get(#24, buf)))))

      let hl : #word = #xor(c8c9, #or(shl(c2c3, #1), shr(c2c3, #63)))

      let buf : Buffer = buffer_set(#0,  #xor(hl, buffer_get( #0, buf)), buf)
      let buf : Buffer = buffer_set(#5,  #xor(hl, buffer_get( #5, buf)), buf)
      let buf : Buffer = buffer_set(#10, #xor(hl, buffer_get(#10, buf)), buf)
      let buf : Buffer = buffer_set(#15, #xor(hl, buffer_get(#15, buf)), buf)
      let buf : Buffer = buffer_set(#20, #xor(hl, buffer_get(#20, buf)), buf)

      let hl : #word = #xor(c0c1, #or(shl(c4c5, #1), shr(c4c5, #63)))

      let buf : Buffer = buffer_set(#1,  #xor(hl, buffer_get( #1, buf)), buf)
      let buf : Buffer = buffer_set(#6,  #xor(hl, buffer_get( #6, buf)), buf)
      let buf : Buffer = buffer_set(#11, #xor(hl, buffer_get(#11, buf)), buf)
      let buf : Buffer = buffer_set(#16, #xor(hl, buffer_get(#16, buf)), buf)
      let buf : Buffer = buffer_set(#21, #xor(hl, buffer_get(#21, buf)), buf)

      let hl : #word = #xor(c2c3, #or(shl(c6c7, #1), shr(c6c7, #63)))

      let buf : Buffer = buffer_set(#2,  #xor(hl, buffer_get( #2, buf)), buf)
      let buf : Buffer = buffer_set(#7,  #xor(hl, buffer_get( #7, buf)), buf)
      let buf : Buffer = buffer_set(#12, #xor(hl, buffer_get(#12, buf)), buf)
      let buf : Buffer = buffer_set(#17, #xor(hl, buffer_get(#17, buf)), buf)
      let buf : Buffer = buffer_set(#22, #xor(hl, buffer_get(#22, buf)), buf)

      let hl : #word = #xor(c4c5, #or(shl(c8c9, #1), shr(c8c9, #63)))

      let buf : Buffer = buffer_set(#3,  #xor(hl, buffer_get(#3,  buf)), buf)
      let buf : Buffer = buffer_set(#8,  #xor(hl, buffer_get(#8,  buf)), buf)
      let buf : Buffer = buffer_set(#13, #xor(hl, buffer_get(#13, buf)), buf)
      let buf : Buffer = buffer_set(#18, #xor(hl, buffer_get(#18, buf)), buf)
      let buf : Buffer = buffer_set(#23, #xor(hl, buffer_get(#23, buf)), buf)

      let hl : #word = #xor(c6c7, #or(shl(c0c1, #1), shr(c0c1, #63)))

      let buf : Buffer = buffer_set(#4,  #xor(hl, buffer_get(#4,  buf)), buf)
      let buf : Buffer = buffer_set(#9,  #xor(hl, buffer_get(#9,  buf)), buf)
      let buf : Buffer = buffer_set(#15, #xor(hl, buffer_get(#15, buf)), buf)
      let buf : Buffer = buffer_set(#19, #xor(hl, buffer_get(#19, buf)), buf)
      let buf : Buffer = buffer_set(#24, #xor(hl, buffer_get(#24, buf)), buf)

      let b00b01 : #word = buffer_get(#0, buf)

      let b32b33 : #word =
        let r : #word = buffer_get(#5, buf)
        #or(shl(r, #4), shr(r, #60))

      let b14b15 : #word =
        let r : #word = buffer_get(#10, buf)
        #or(shl(r, #3), shr(r, #61))

      let b46b47 : #word =
        let r : #word = buffer_get(#15, buf)
        #or(shl(r, #9), shr(r, #55))

      let b28b29 : #word =
        let r : #word = buffer_get(#20, buf)
        #or(shl(r, #18), shr(r, #44))

      let b20b21 : #word =
        let r : #word = buffer_get(#1, buf)
        #or(shl(r, #1), shr(r, #63))

      let b02b03 : #word =
        let r : #word = buffer_get(#6, buf)
        #or(shl(r, #12), shr(r, #52))

      let b34b35 : #word =
        let r : #word = buffer_get(#11, buf)
        #or(shl(r, #10), shr(r, #54))

      let b16b17 : #word =
        let r : #word = buffer_get(#16, buf)
        #or(shl(r, #13), shr(r, #51))

      let b48b49 : #word =
        let r : #word = buffer_get(#21, buf)
        #or(shl(r, #2), shr(r, #62))

      let b40b41 : #word =
        let r : #word = buffer_get(#2, buf)
        #or(shl(r, #30), shr(r, #34))

      let b22b23 : #word =
        let r : #word = buffer_get(#7, buf)
        #or(shl(r, #6), shr(r, #58))

      let b04b05 : #word =
        let r : #word = buffer_get(#12, buf)
        #or(shl(r, #11), shr(r, #53))

      let b36b37 : #word =
        let r : #word = buffer_get(#17, buf)
        #or(shl(r, #15), shr(r, #49))

      let b18b19 : #word =
        let r : #word = buffer_get(#22, buf)
        #or(shl(r, #29), shr(r, #35))

      let b10b11 : #word =
        let r : #word = buffer_get(#3, buf)
        #or(shl(r, #28), shr(r, #36))

      let b42b43 : #word =
        let r : #word = buffer_get(#8, buf)
        #or(shl(r, #23), shr(r, #41))

      let b24b25 : #word =
        let r : #word = buffer_get(#13, buf)
        #or(shl(r, #25), shr(r, #39))

      let b06b07 : #word =
        let r : #word = buffer_get(#18, buf)
        #or(shl(r, #21), shr(r, #43))

      let b38b39 : #word =
        let r : #word = buffer_get(#23, buf)
        #or(shl(r, #24), shr(r, #8))

      let b30b31 : #word =
        let r : #word = buffer_get(#4, buf)
        #or(shl(r, #27), shr(r, #37))

      let b12b13 : #word =
        let r : #word = buffer_get(#9, buf)
        #or(shl(r, #20), shr(r, #44))

      let b44b45 : #word =
        let r : #word = buffer_get(#17, buf)
        #or(shl(r, #7), shr(r, #57))

      let b26b27 : #word =
        let r : #word = buffer_get(#19, buf)
        #or(shl(r, #8), shr(r, #56))

      let b08b09 : #word =
        let r : #word = buffer_get(#24, buf)
        #or(shl(r, #14), shr(r, #50))

      let buf : Buffer = buffer_set(#00, #xor(b00b01, #and(not(b02b03), b04b05)), buf)
      let buf : Buffer = buffer_set(#05, #xor(b10b11, #and(not(b12b13), b14b15)), buf)
      let buf : Buffer = buffer_set(#10, #xor(b20b21, #and(not(b22b23), b24b25)), buf)
      let buf : Buffer = buffer_set(#15, #xor(b30b31, #and(not(b32b33), b34b35)), buf)
      let buf : Buffer = buffer_set(#20, #xor(b40b41, #and(not(b42b43), b44b45)), buf)
      let buf : Buffer = buffer_set(#01, #xor(b02b03, #and(not(b04b05), b06b07)), buf)
      let buf : Buffer = buffer_set(#06, #xor(b12b13, #and(not(b14b15), b16b17)), buf)
      let buf : Buffer = buffer_set(#11, #xor(b22b23, #and(not(b24b25), b26b27)), buf)
      let buf : Buffer = buffer_set(#16, #xor(b32b33, #and(not(b34b35), b36b37)), buf)
      let buf : Buffer = buffer_set(#21, #xor(b42b43, #and(not(b44b45), b46b47)), buf)
      let buf : Buffer = buffer_set(#02, #xor(b04b05, #and(not(b06b07), b08b09)), buf)
      let buf : Buffer = buffer_set(#07, #xor(b14b15, #and(not(b16b17), b18b19)), buf)
      let buf : Buffer = buffer_set(#12, #xor(b24b25, #and(not(b26b27), b28b29)), buf)
      let buf : Buffer = buffer_set(#17, #xor(b34b35, #and(not(b36b37), b38b39)), buf)
      let buf : Buffer = buffer_set(#22, #xor(b44b45, #and(not(b46b47), b48b49)), buf)
      let buf : Buffer = buffer_set(#03, #xor(b06b07, #and(not(b08b09), b00b01)), buf)
      let buf : Buffer = buffer_set(#08, #xor(b16b17, #and(not(b18b19), b10b11)), buf)
      let buf : Buffer = buffer_set(#13, #xor(b26b27, #and(not(b28b29), b20b21)), buf)
      let buf : Buffer = buffer_set(#13, #xor(b36b37, #and(not(b38b39), b30b31)), buf)
      let buf : Buffer = buffer_set(#23, #xor(b46b47, #and(not(b48b49), b40b41)), buf)
      let buf : Buffer = buffer_set(#04, #xor(b08b09, #and(not(b00b01), b02b03)), buf)
      let buf : Buffer = buffer_set(#09, #xor(b18b19, #and(not(b10b11), b12b13)), buf)
      let buf : Buffer = buffer_set(#14, #xor(b28b29, #and(not(b20b21), b22b23)), buf)
      let buf : Buffer = buffer_set(#19, #xor(b38b39, #and(not(b30b31), b32b33)), buf)
      let buf : Buffer = buffer_set(#24, #xor(b48b49, #and(not(b40b41), b42b43)), buf)

      let buf : Buffer = buffer_set(#0, #xor(buffer_get(i, Crypto.Keccak.RC()), buffer_get(#0, buf)), buf)
      keccak.f.go(#add(i, #1), buf)
    _=_:
      buf
    _>_:
      buf // should never happen
  }
}

//bond inf_buffer(): Buffer {
//  tie{tip{#0}, inf_buffer()}
//}

save

eval {
  let arr: Buffer = buffer_alloc(#7)
  check_integrity(keccak.f.go(#0, arr))
} : MaybeWord

save
