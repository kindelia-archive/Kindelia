#world #transaction ((world #world (Maybe ((Pair Litereum.World) String))) #world.entry (((((transaction #transaction (Maybe ((Pair Litereum.World) String))) #transaction.data !data = transaction.data; ((data #data (Maybe ((Pair Litereum.World) String))) #data.name #data.constructors ((((((Map.get Litereum.Entry) data.name) world.entry) #got_type (Maybe ((Pair Litereum.World) String))) !world = ((world # Litereum.World) #entry (Litereum.World.new ((((Map.set Litereum.Entry) data.name) (Litereum.Entry.data data)) world.entry))); ((Maybe.some ((Pair Litereum.World) String)) ((((Pair.new Litereum.World) String) world) ((String.concat "[data] ") data.name)))) #got_type.value (Maybe.none ((Pair Litereum.World) String))))) #transaction.bond !bond = transaction.bond; ((bond #bond (Maybe ((Pair Litereum.World) String))) #bond.name #bond.inam #bond.ityp #bond.otyp #bond.main ((((((Map.get Litereum.Entry) bond.name) world.entry) #got (Maybe ((Pair Litereum.World) String))) !world = ((world # Litereum.World) #entry (Litereum.World.new ((((Map.set Litereum.Entry) bond.name) (Litereum.Entry.bond bond)) world.entry))); !context = ((((Litereum.extend Litereum.Type) ((Map.from_list Litereum.Type) (List.nil ((Pair String) Litereum.Type)))) bond.inam) bond.ityp); (((((((Litereum.check context) world) bond.main) bond.otyp) # (Maybe ((Pair Litereum.World) String))) ((Maybe.some ((Pair Litereum.World) String)) ((((Pair.new Litereum.World) String) world) ((String.concat "[bond] ") bond.name)))) (Maybe.none ((Pair Litereum.World) String)))) #got.value (Maybe.none ((Pair Litereum.World) String))))) #transaction.file !file = transaction.file; ((file #file (Maybe ((Pair Litereum.World) String))) #file.name #file.ownr #file.type #file.expr ((((((Map.get Litereum.Entry) file.name) world.entry) #got (Maybe ((Pair Litereum.World) String))) !world = ((world # Litereum.World) #entry (Litereum.World.new ((((Map.set Litereum.Entry) file.name) (Litereum.Entry.file file)) world.entry))); (((((((Litereum.check ((Map.from_list Litereum.Type) (List.nil ((Pair String) Litereum.Type)))) world) file.expr) file.type) # (Maybe ((Pair Litereum.World) String))) ((Maybe.some ((Pair Litereum.World) String)) ((((Pair.new Litereum.World) String) world) ((String.concat "[file] ") file.name)))) (Maybe.none ((Pair Litereum.World) String)))) #got.value (Maybe.none ((Pair Litereum.World) String))))) #transaction.eval !eval = transaction.eval; ((eval #eval (Maybe ((Pair Litereum.World) String))) #eval.term #eval.type (((((((Litereum.check ((Map.from_list Litereum.Type) (List.nil ((Pair String) Litereum.Type)))) world) eval.term) eval.type) # (Maybe ((Pair Litereum.World) String))) !fresh = +0; ((((((Litereum.sanitize world) ((Map.from_list String) (List.nil ((Pair String) String)))) fresh) eval.term) # (Maybe ((Pair Litereum.World) String))) #fresh #term ((((((eval.type #eval.type Litereum.Runtime.Term) (Litereum.normalize ((((((Litereum.Runtime.new Litereum.Term) world) ((Map.from_list Litereum.Term) (List.nil ((Pair String) Litereum.Term)))) fresh) +0) term))) #eval.type.name (Litereum.normalize ((((((Litereum.Runtime.new Litereum.Term) world) ((Map.from_list Litereum.Term) (List.nil ((Pair String) Litereum.Term)))) fresh) +0) term))) #eval.type.rety (Litereum.normalize (Litereum.run ((((((Litereum.Runtime.new Litereum.Term) world) ((Map.from_list Litereum.Term) (List.nil ((Pair String) Litereum.Term)))) fresh) +0) term)))) # (Maybe ((Pair Litereum.World) String))) #world #subst #fresh #gas #term ((Maybe.some ((Pair Litereum.World) String)) ((((Pair.new Litereum.World) String) world) ((String.concat "[eval] ") ((Litereum.show.term world) term))))))) (Maybe.none ((Pair Litereum.World) String))))))