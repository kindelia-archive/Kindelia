#code #ixi #ix0 #ix1 #col #row #lft #lin #res !spa = +3; (((code #code String) (((Kind.Code.highlight.end col) row) ((List.reverse String) res))) #code.head #code.tail (((((U16.eql code.head) '\u{a}') # String) !stp = (((((Maybe.extract Nat) lft) Bool) Bool.false) Nat.is_zero); (((stp # String) (((Kind.Code.highlight.end col) row) ((List.reverse String) res))) !siz = (Nat.succ (Nat.double spa)); !lft = (((ix1 #ix1 (Maybe Nat)) (((lft #lft (Maybe Nat)) ((Maybe.some Nat) spa)) #lft.value ((Maybe.some Nat) (Nat.pred lft.value)))) #ix1.pred lft); !ixi = (Nat.pred ixi); !ix0 = (Nat.pred ix0); !ix1 = (Nat.pred ix1); !col = +0; !row = (Nat.succ row); !res = (((List.cons String) (String.reverse lin)) res); !lin = (String.reverse (String.flatten (((List.cons String) (((String.pad_left +4) ' ') (Nat.show row))) (((List.cons String) " | ") (List.nil String))))); (((((((((Kind.Code.highlight.go code.tail) ixi) ix0) ix1) col) row) lft) lin) res))) !chr = ((String.cons code.head) String.nil); !chr = (((((Bool.and (Nat.is_zero ix0)) (Bool.not (Nat.is_zero ix1))) # String) (String.reverse ((Kind.Code.color "41") ((Kind.Code.color "37") chr)))) (((((Bool.and (Nat.is_zero ixi)) (Bool.not (Nat.is_zero ix1))) # String) (String.reverse ((Kind.Code.color "31") ((Kind.Code.color "4") chr)))) chr)); !res = (((((Nat.eql ix0) +1) # (List String)) (((List.take String) spa) res)) res); !ixi = (Nat.pred ixi); !ix0 = (Nat.pred ix0); !ix1 = (Nat.pred ix1); !col = (Nat.succ col); !lin = (String.flatten (((List.cons String) chr) (((List.cons String) lin) (List.nil String)))); (((((((((Kind.Code.highlight.go code.tail) ixi) ix0) ix1) col) row) lft) lin) res)))