#world #vars #bits ((((bits #bits ((Pair Bits) Kindelia.Term)) ((((Pair.new Bits) Kindelia.Term) bits) (Kindelia.Term.word (U64.from_nat +0)))) #bits.pred (((((Kindelia.deserialize.name.local world) vars) bits.pred) # ((Pair Bits) Kindelia.Term)) #bits #name ((((Pair.new Bits) Kindelia.Term) bits) (Kindelia.Term.var name)))) #bits.pred ((((Kindelia.deserialize.fixlen +3) bits.pred) # ((Pair Bits) Kindelia.Term)) #bits #ctor (((((Nat.eql ctor) +0) # ((Pair Bits) Kindelia.Term)) (((Kindelia.deserialize.name bits) # ((Pair Bits) Kindelia.Term)) #bits #name ((((Kindelia.deserialize.type world) bits) # ((Pair Bits) Kindelia.Term)) #bits #type (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #expr (((((Kindelia.deserialize.term world) (((List.cons String) name) vars)) bits) # ((Pair Bits) Kindelia.Term)) #bits #body ((((Pair.new Bits) Kindelia.Term) bits) ((((Kindelia.Term.let name) type) expr) body))))))) (((((Nat.eql ctor) +1) # ((Pair Bits) Kindelia.Term)) (((Kindelia.deserialize.name bits) # ((Pair Bits) Kindelia.Term)) #bits #bond (((((Kindelia.deserialize.list Kindelia.Term) ((Kindelia.deserialize.term world) vars)) bits) # ((Pair Bits) Kindelia.Term)) #bits #args ((((Pair.new Bits) Kindelia.Term) bits) ((Kindelia.Term.call bond) args))))) (((((Nat.eql ctor) +2) # ((Pair Bits) Kindelia.Term)) (((Kindelia.deserialize.varlen bits) # ((Pair Bits) Kindelia.Term)) #bits #ctor (((((Kindelia.deserialize.list Kindelia.Term) ((Kindelia.deserialize.term world) vars)) bits) # ((Pair Bits) Kindelia.Term)) #bits #vals ((((Pair.new Bits) Kindelia.Term) bits) ((Kindelia.Term.create ctor) vals))))) (((((Nat.eql ctor) +3) # ((Pair Bits) Kindelia.Term)) (((((Kindelia.deserialize.name.local world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #name (((Kindelia.deserialize.name bits) # ((Pair Bits) Kindelia.Term)) #bits #data (((((((Kindelia.deserialize.cases world) vars) name) (((Maybe.default (List Kindelia.Constructor)) ((Kindelia.get_ctrs world) data)) (List.nil Kindelia.Constructor))) bits) # ((Pair Bits) Kindelia.Term)) #bits #cses ((((Pair.new Bits) Kindelia.Term) bits) (((Kindelia.Term.match name) data) cses)))))) (((((Nat.eql ctor) +4) # ((Pair Bits) Kindelia.Term)) ((((Kindelia.deserialize.fixlen +64) bits) # ((Pair Bits) Kindelia.Term)) #bits #numb ((((Pair.new Bits) Kindelia.Term) bits) (Kindelia.Term.word (Nat.to_u64 numb))))) (((((Nat.eql ctor) +5) # ((Pair Bits) Kindelia.Term)) (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #val0 (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #val1 (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #iflt (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #ifeq (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #ifgt ((((Pair.new Bits) Kindelia.Term) bits) (((((Kindelia.Term.compare val0) val1) iflt) ifeq) ifgt)))))))) (((((Nat.eql ctor) +6) # ((Pair Bits) Kindelia.Term)) ((((Kindelia.deserialize.fixlen +3) bits) # ((Pair Bits) Kindelia.Term)) #bits #oper (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #val0 (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #val1 !oper = (((((Nat.eql oper) +0) # Kindelia.Operation) Kindelia.Operation.add) (((((Nat.eql oper) +1) # Kindelia.Operation) Kindelia.Operation.sub) (((((Nat.eql oper) +2) # Kindelia.Operation) Kindelia.Operation.mul) (((((Nat.eql oper) +3) # Kindelia.Operation) Kindelia.Operation.div) (((((Nat.eql oper) +4) # Kindelia.Operation) Kindelia.Operation.mod) (((((Nat.eql oper) +5) # Kindelia.Operation) Kindelia.Operation.or) (((((Nat.eql oper) +6) # Kindelia.Operation) Kindelia.Operation.and) (((((Nat.eql oper) +7) # Kindelia.Operation) Kindelia.Operation.xor) Kindelia.Operation.add)))))))); ((((Pair.new Bits) Kindelia.Term) bits) (((Kindelia.Term.operate oper) val0) val1)))))) (((((Nat.eql ctor) +7) # ((Pair Bits) Kindelia.Term)) (((Kindelia.deserialize.name bits) # ((Pair Bits) Kindelia.Term)) #bits #bond (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #expr (((((Kindelia.deserialize.term world) vars) bits) # ((Pair Bits) Kindelia.Term)) #bits #cont ((((Pair.new Bits) Kindelia.Term) bits) (((Kindelia.Term.bind bond) expr) cont)))))) ((((Pair.new Bits) Kindelia.Term) bits) (Kindelia.Term.word (U64.from_nat +0)))))))))))))