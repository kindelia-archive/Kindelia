#world #transaction #bipass ((world #world (Maybe Litereum.World)) #world.name_count #world.name_to_index #world.index_to_name #world.entry (((((transaction #transaction (Maybe Litereum.World)) #transaction.name !name = transaction.name; ((((((Map.get Nat) name) ((world # (Map Nat)) #name_count #name_to_index #index_to_name #entry name_to_index)) #index (Maybe Litereum.World)) !world = ((world # Litereum.World) #name_count #name_to_index #index_to_name #entry ((((Litereum.World.new ((Nat.add world.name_count) +1)) name_to_index) index_to_name) entry)); !world = ((world # Litereum.World) #name_count #name_to_index #index_to_name #entry ((((Litereum.World.new name_count) ((((Map.set Nat) name) world.name_count) world.name_to_index)) index_to_name) entry)); !world = ((world # Litereum.World) #name_count #name_to_index #index_to_name #entry ((((Litereum.World.new name_count) name_to_index) ((((Map.set String) (Nat.show world.name_count)) name) world.index_to_name)) entry)); ((Maybe.some Litereum.World) world)) #index.value (Maybe.none Litereum.World))) #transaction.data !data = transaction.data; ((data #data (Maybe Litereum.World)) #data.name #data.constructors ((((((Map.get Litereum.Entry) data.name) world.entry) #got_type (Maybe Litereum.World)) !logger = (((bipass # Unit) Unit.new) (((Debug.log Unit) ((String.concat "- data ") data.name)) # Unit.new)); !world = ((world # Litereum.World) #name_count #name_to_index #index_to_name #entry ((((Litereum.World.new name_count) name_to_index) index_to_name) ((((Map.set Litereum.Entry) data.name) (Litereum.Entry.data data)) world.entry))); ((Maybe.some Litereum.World) world)) #got_type.value (Maybe.none Litereum.World)))) #transaction.bond !bond = transaction.bond; ((bond #bond (Maybe Litereum.World)) #bond.name #bond.owners #bond.input_names #bond.input_types #bond.output_type #bond.main ((((((Map.get Litereum.Entry) bond.name) world.entry) #got (Maybe Litereum.World)) !world = ((world # Litereum.World) #name_count #name_to_index #index_to_name #entry ((((Litereum.World.new name_count) name_to_index) index_to_name) ((((Map.set Litereum.Entry) bond.name) (Litereum.Entry.bond bond)) world.entry))); !context = ((((Litereum.extend Litereum.Type) ((Map.from_list Litereum.Type) (List.nil ((Pair String) Litereum.Type)))) bond.input_names) bond.input_types); (((bipass # (Maybe Litereum.World)) ((Maybe.some Litereum.World) world)) (((((((Litereum.check context) world) bond.main) bond.output_type) # (Maybe Litereum.World)) !logger = (((bipass # Unit) Unit.new) (((Debug.log Unit) ((String.concat "- bond ") bond.name)) # Unit.new)); ((Maybe.some Litereum.World) world)) !logger = (((bipass # Unit) Unit.new) (((Debug.log Unit) ((String.concat "- bond error: ill-typed bond ") bond.name)) # Unit.new)); (Maybe.none Litereum.World)))) #got.value !logger = (((bipass # Unit) Unit.new) (((Debug.log Unit) ((String.concat "- bond error: redefinition of ") bond.name)) # Unit.new)); (Maybe.none Litereum.World)))) #transaction.eval !eval = transaction.eval; ((eval #eval (Maybe Litereum.World)) #eval.term #eval.type (((bipass # (Maybe Litereum.World)) ((Maybe.some Litereum.World) world)) (((((((Litereum.check ((Map.from_list Litereum.Type) (List.nil ((Pair String) Litereum.Type)))) world) eval.term) eval.type) # (Maybe Litereum.World)) (((Litereum.normalize (((((Litereum.Runtime.new Litereum.Term) world) ((Map.from_list Litereum.Term) (List.nil ((Pair String) Litereum.Term)))) +0) eval.term)) # (Maybe Litereum.World)) #world #subst #gas #term !logger = (((bipass # Unit) Unit.new) (((Debug.log Unit) ((String.concat "- eval ") ((Litereum.show.term world) term))) # Unit.new)); ((Maybe.some Litereum.World) world))) !logger = (((bipass # Unit) Unit.new) (((Debug.log Unit) "- eval error: ill-typed term") # Unit.new)); (Maybe.none Litereum.World))))))