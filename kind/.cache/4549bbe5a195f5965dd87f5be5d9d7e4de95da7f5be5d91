#world ((((((Monad.bind Parser) Parser.monad) String) Kindelia.Term) Kindelia.parse.name) #data_name ((((((Monad.bind Parser) Parser.monad) Unit) Kindelia.Term) (Kindelia.parse.text "@")) # ((((((Monad.bind Parser) Parser.monad) String) Kindelia.Term) Kindelia.parse.name) #ctor_name (((((Kindelia.get_data world) data_name) # (Parser Kindelia.Term)) ((Parser.fail Kindelia.Term) "Type not found.")) #data !data = data; ((data #data (Parser Kindelia.Term)) #data.name #data.constructors ((((((Monad.bind Parser) Parser.monad) Unit) Kindelia.Term) (Kindelia.parse.text "{")) # ((((((List.find Kindelia.Constructor) #ctor ((String.eql ((ctor # String) #name #args name)) ctor_name)) data.constructors) # (Parser Kindelia.Term)) ((Parser.fail Kindelia.Term) "Constructor not found.")) #ctor !ctor = ctor; ((ctor #ctor (Parser Kindelia.Term)) #ctor.name #ctor.args ((((((Monad.bind Parser) Parser.monad) (List Kindelia.Term)) Kindelia.Term) ((Kindelia.parse.term.create.fields world) ((((List.mapped ((Pair String) Kindelia.Type)) ctor.args) String) ((Pair.fst String) Kindelia.Type)))) #vals ((((((Monad.bind Parser) Parser.monad) Unit) Kindelia.Term) (Kindelia.parse.text "}")) # !cnam = ((((List.mapped Kindelia.Constructor) ((data # (List Kindelia.Constructor)) #name #constructors constructors)) String) #x ((x # String) #name #args name)); !ctor = (((Maybe.default Nat) (((List.find_index String) cnam) (String.eql ctor_name))) +0); ((((Monad.pure Parser) Parser.monad) Kindelia.Term) ((Kindelia.Term.create ctor) vals))))))))))))