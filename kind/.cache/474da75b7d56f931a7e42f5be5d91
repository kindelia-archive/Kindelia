#context #world #term #type (((context #context Bool) ((world #world Bool) #world.name_count #world.name_to_index #world.index_to_name #world.entry ((((((((((term #term Bool) #term.name ((((((Map.get Litereum.Type) term.name) context) # Bool) Bool.false) #var_type ((Litereum.equal var_type) type))) #term.bond #term.args !def0 = ((Maybe.is_some Nat) (((Map.get Nat) term.bond) world.name_to_index)); (((((Litereum.get_bond world) term.bond) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.owners #bond.input_names #bond.input_types #bond.output_type #bond.main !otyp = ((Litereum.equal bond.output_type) type); !args = ((((List.zip Litereum.Term) Litereum.Type) term.args) bond.input_types); !args = (((List.all ((Pair Litereum.Term) Litereum.Type)) #x ((((Litereum.check context) world) ((x # Litereum.Term) #fst #snd fst)) ((x # Litereum.Type) #fst #snd snd))) args); ((Bool.and def0) ((Bool.and otyp) args))))) #term.name #term.type #term.expr #term.body !def0 = ((Maybe.is_some Nat) (((Map.get Nat) term.name) world.name_to_index)); !expr = ((((Litereum.check context) world) term.expr) term.type); !ctx2 = ((((Map.set Litereum.Type) term.name) term.type) context); !cont = ((((Litereum.check ctx2) world) term.body) type); ((Bool.and def0) ((Bool.and expr) cont))) #term.ctor #term.vals (((type #type Bool) Bool.false) #type.name (((((Litereum.get_data world) type.name) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors (((((Litereum.get_constructor_value data) term.ctor) # Bool) Bool.false) #ctor !ctor = ctor; ((ctor #ctor Bool) #ctor.name #ctor.field_names #ctor.field_types !size = ((Nat.eql ((List.length Litereum.Term) term.vals)) ((List.length Litereum.Type) ctor.field_types)); !vals = ((((List.zip Litereum.Term) Litereum.Type) term.vals) ctor.field_types); !vals = (((List.all ((Pair Litereum.Term) Litereum.Type)) #x ((((Litereum.check context) world) ((x # Litereum.Term) #fst #snd fst)) ((x # Litereum.Type) #fst #snd snd))) vals); ((Bool.and size) vals))))))) #term.name #term.data #term.cses (((((Litereum.get_data world) term.data) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors !def0 = ((Maybe.is_some Nat) (((Map.get Nat) term.data) world.name_to_index)); ((((((Map.get Litereum.Type) term.name) context) # Bool) Bool.false) #type !size = ((Nat.eql ((List.length Litereum.Term) term.cses)) ((List.length Litereum.Constructor) data.constructors)); !expr = ((((Litereum.check context) world) (Litereum.Term.var term.name)) (Litereum.Type.data term.data)); !cses = ((((((List.zipped_with Litereum.Term) Litereum.Constructor) term.cses) data.constructors) Bool) #case_body #case_ctor !nams = ((((List.map String) String) (String.concat ((String.concat term.name) "."))) ((case_ctor # (List String)) #name #field_names #field_types field_names)); !typs = ((case_ctor # (List Litereum.Type)) #name #field_names #field_types field_types); !ctx2 = ((((Litereum.extend Litereum.Type) context) nams) typs); ((((Litereum.check ctx2) world) case_body) type)); ((Bool.and def0) ((Bool.and size) (List.and cses))))))) #term.numb (((type #type Bool) Bool.true) #type.name Bool.false)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt !val0 = ((((Litereum.check context) world) term.val0) Litereum.Type.word); !val1 = ((((Litereum.check context) world) term.val0) Litereum.Type.word); !iflt = ((((Litereum.check context) world) term.iflt) type); !ifeq = ((((Litereum.check context) world) term.ifeq) type); !ifgt = ((((Litereum.check context) world) term.ifgt) type); ((Bool.and val0) ((Bool.and val1) ((Bool.and iflt) ((Bool.and ifeq) ifgt))))) #term.oper #term.val0 #term.val1 !val0 = ((((Litereum.check context) world) term.val0) Litereum.Type.word); !val1 = ((((Litereum.check context) world) term.val1) Litereum.Type.word); ((Bool.and val0) val1)) #term.name #term.main #term.body (((((Litereum.get_bond world) term.name) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.owners #bond.input_names #bond.input_types #bond.output_type #bond.main !ctx2 = ((((Litereum.extend Litereum.Type) context) bond.input_names) bond.input_types); !main = ((((Litereum.check ctx2) world) term.main) bond.output_type); !body = ((((Litereum.check context) world) term.body) type); ((Bool.and main) body)))))) #context.size #context.key #context.val #context.left #context.right ((world #world Bool) #world.name_count #world.name_to_index #world.index_to_name #world.entry ((((((((((term #term Bool) #term.name ((((((Map.get Litereum.Type) term.name) context) # Bool) Bool.false) #var_type ((Litereum.equal var_type) type))) #term.bond #term.args !def0 = ((Maybe.is_some Nat) (((Map.get Nat) term.bond) world.name_to_index)); (((((Litereum.get_bond world) term.bond) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.owners #bond.input_names #bond.input_types #bond.output_type #bond.main !otyp = ((Litereum.equal bond.output_type) type); !args = ((((List.zip Litereum.Term) Litereum.Type) term.args) bond.input_types); !args = (((List.all ((Pair Litereum.Term) Litereum.Type)) #x ((((Litereum.check context) world) ((x # Litereum.Term) #fst #snd fst)) ((x # Litereum.Type) #fst #snd snd))) args); ((Bool.and def0) ((Bool.and otyp) args))))) #term.name #term.type #term.expr #term.body !def0 = ((Maybe.is_some Nat) (((Map.get Nat) term.name) world.name_to_index)); !expr = ((((Litereum.check context) world) term.expr) term.type); !ctx2 = ((((Map.set Litereum.Type) term.name) term.type) context); !cont = ((((Litereum.check ctx2) world) term.body) type); ((Bool.and def0) ((Bool.and expr) cont))) #term.ctor #term.vals (((type #type Bool) Bool.false) #type.name (((((Litereum.get_data world) type.name) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors (((((Litereum.get_constructor_value data) term.ctor) # Bool) Bool.false) #ctor !ctor = ctor; ((ctor #ctor Bool) #ctor.name #ctor.field_names #ctor.field_types !size = ((Nat.eql ((List.length Litereum.Term) term.vals)) ((List.length Litereum.Type) ctor.field_types)); !vals = ((((List.zip Litereum.Term) Litereum.Type) term.vals) ctor.field_types); !vals = (((List.all ((Pair Litereum.Term) Litereum.Type)) #x ((((Litereum.check context) world) ((x # Litereum.Term) #fst #snd fst)) ((x # Litereum.Type) #fst #snd snd))) vals); ((Bool.and size) vals))))))) #term.name #term.data #term.cses (((((Litereum.get_data world) term.data) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors !def0 = ((Maybe.is_some Nat) (((Map.get Nat) term.data) world.name_to_index)); ((((((Map.get Litereum.Type) term.name) context) # Bool) Bool.false) #type !size = ((Nat.eql ((List.length Litereum.Term) term.cses)) ((List.length Litereum.Constructor) data.constructors)); !expr = ((((Litereum.check context) world) (Litereum.Term.var term.name)) (Litereum.Type.data term.data)); !cses = ((((((List.zipped_with Litereum.Term) Litereum.Constructor) term.cses) data.constructors) Bool) #case_body #case_ctor !nams = ((((List.map String) String) (String.concat ((String.concat term.name) "."))) ((case_ctor # (List String)) #name #field_names #field_types field_names)); !typs = ((case_ctor # (List Litereum.Type)) #name #field_names #field_types field_types); !ctx2 = ((((Litereum.extend Litereum.Type) context) nams) typs); ((((Litereum.check ctx2) world) case_body) type)); ((Bool.and def0) ((Bool.and size) (List.and cses))))))) #term.numb (((type #type Bool) Bool.true) #type.name Bool.false)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt !val0 = ((((Litereum.check context) world) term.val0) Litereum.Type.word); !val1 = ((((Litereum.check context) world) term.val0) Litereum.Type.word); !iflt = ((((Litereum.check context) world) term.iflt) type); !ifeq = ((((Litereum.check context) world) term.ifeq) type); !ifgt = ((((Litereum.check context) world) term.ifgt) type); ((Bool.and val0) ((Bool.and val1) ((Bool.and iflt) ((Bool.and ifeq) ifgt))))) #term.oper #term.val0 #term.val1 !val0 = ((((Litereum.check context) world) term.val0) Litereum.Type.word); !val1 = ((((Litereum.check context) world) term.val1) Litereum.Type.word); ((Bool.and val0) val1)) #term.name #term.main #term.body (((((Litereum.get_bond world) term.name) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.owners #bond.input_names #bond.input_types #bond.output_type #bond.main !ctx2 = ((((Litereum.extend Litereum.Type) context) bond.input_names) bond.input_types); !main = ((((Litereum.check ctx2) world) term.main) bond.output_type); !body = ((((Litereum.check context) world) term.body) type); ((Bool.and main) body))))))