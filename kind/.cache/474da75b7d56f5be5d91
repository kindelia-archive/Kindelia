!world = Litereum.genesis; !code = "\u{a}    name Bool\u{a}    name true\u{a}    name false\u{a}    name Nat\u{a}    name zero\u{a}    name succ\u{a}    name x\u{a}    name not\u{a}    name double\u{a}\u{a}    eval {\u{a}      #50\u{a}    } : #word\u{a}\u{a}    type Bool {\u{a}      true{}\u{a}      false{}\u{a}    }\u{a}\u{a}    type Nat {\u{a}      zero{}\u{a}      succ{pred: Nat}\u{a}    }\u{a}\u{a}    eval {\u{a}      +(#10, #20)\u{a}    } : #word\u{a}\u{a}    bond not(x: Bool): Bool\u{a}      case x : Bool {\u{a}        true: false{}\u{a}        false: true{}\u{a}      }\u{a}\u{a}    eval {\u{a}      not(not(not(true{})))\u{a}    } : Bool\u{a}\u{a}    bond double(x: Nat): Nat\u{a}      case x : Nat {\u{a}        zero: zero{}\u{a}        succ: succ{succ{double(x.pred)}}\u{a}      }\u{a}\u{a}    eval {\u{a}      double(succ{succ{succ{zero{}}}})\u{a}    } : Nat\u{a}  "; ((((((Parser.run (List Litereum.Transaction)) (Litereum.parse.block world)) code) # (IO Unit)) (IO.print "deu ruim")) #block (((Debug.log (IO Unit)) "Block: ") # ((((((Monad.bind IO) IO.monad) Unit) Unit) (IO.print ((Litereum.show.block world) block))) # ((((((Monad.bind IO) IO.monad) Unit) Unit) (IO.print "")) # (((Debug.log (IO Unit)) "Evaluation: ") # (((((Litereum.run.block world) block) # (IO Unit)) (IO.print "failed execution")) #world ((((((Monad.bind IO) IO.monad) Unit) Unit) (IO.print "Done!")) # ((((((Monad.bind IO) IO.monad) Unit) Unit) (IO.print "")) # ((((((Monad.bind IO) IO.monad) Unit) Unit) (IO.print "Serialization:")) # !bits = ((Litereum.serialize.block Litereum.genesis) block); ((((((Monad.bind IO) IO.monad) Unit) Unit) (IO.print ((String.concat "- ") (Bits.hex.encode bits)))) # ((((((Monad.bind IO) IO.monad) Unit) Unit) (IO.print "")) # ((((((Monad.bind IO) IO.monad) Unit) Unit) (IO.print "Deserialization:")) # ((((Litereum.deserialize.block Litereum.genesis) bits) # (IO Unit)) #bits #block (IO.print ((Litereum.show.block Litereum.genesis) block)))))))))))))))