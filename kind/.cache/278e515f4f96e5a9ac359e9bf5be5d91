#world #context #term #type (((((((((((((term #term *) #term.name (((Equal (Maybe Kindelia.Type)) (((Map.get Kindelia.Type) term.name) context)) ((Maybe.some Kindelia.Type) type))) #term.bond #term.args ((((((Map.get Kindelia.Entry) term.bond) world) #b *) Empty) #b.value ((((b.value #b *) #b.value Empty) #b.value ((b.value #b *) #b.name #b.iprm #b.otyp #b.main ((And ((((Theory.WellTyped.param_list world) context) b.iprm) term.args)) (((Equal Kindelia.Type) type) b.otyp)))) #b.value Empty))) #term.name #term.type #term.expr #term.body ((And ((((Theory.WellTyped world) context) term.expr) term.type)) ((((Theory.WellTyped world) ((((Map.set Kindelia.Type) term.name) term.type) context)) term.body) type))) #term.ctor #term.vals ((((type #type *) Empty) #type.name ((((((Map.get Kindelia.Entry) type.name) world) #t *) Empty) #t.value ((((t.value #t *) #t.value (((((Kindelia.get_constructor_value t.value) term.ctor) #ctor *) Empty) #ctor.value ((ctor.value #ctor *) #ctor.name #ctor.fprm ((((Theory.WellTyped.param_list world) context) ctor.fprm) term.vals)))) #t.value Empty) #t.value Empty))) #type.rety Empty)) #term.name #term.data #term.cses (((((Kindelia.get_data world) term.data) #data *) Empty) #data.value ((data.value #data.value *) #data.value.name #data.value.constructors ((((((Theory.WellTyped.match world) context) term.name) term.cses) data.value.constructors) type)))) #term.numb (((Equal Kindelia.Type) type) Kindelia.Type.word)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt (((((Quintet ((((Theory.WellTyped world) context) term.val0) Kindelia.Type.word)) ((((Theory.WellTyped world) context) term.val1) Kindelia.Type.word)) ((((Theory.WellTyped world) context) term.iflt) type)) ((((Theory.WellTyped world) context) term.ifeq) type)) ((((Theory.WellTyped world) context) term.ifgt) type))) #term.oper #term.val0 #term.val1 (((Triple (((Equal Kindelia.Type) type) Kindelia.Type.word)) ((((Theory.WellTyped world) context) term.val0) Kindelia.Type.word)) ((((Theory.WellTyped world) context) term.val1) Kindelia.Type.word))) #term.file #term.expr #term.body (((Triple (Kindelia.Type.IsEffect type)) ((((Theory.WellTyped world) context) term.body) type)) ((((((Map.get Kindelia.Entry) term.file) world) #f *) Empty) #f.value ((((f.value #f *) #f.value Empty) #f.value Empty) #f.value ((f.value #f *) #f.name #f.ownr #f.type #f.expr ((((Theory.WellTyped world) context) term.expr) f.type)))))) #term.name #term.file #term.body ((And (Kindelia.Type.IsEffect type)) ((((((Map.get Kindelia.Entry) term.file) world) #f *) Empty) #f.value ((((f.value #f *) #f.value Empty) #f.value Empty) #f.value ((f.value #f *) #f.name #f.ownr #f.type #f.expr ((((Theory.WellTyped world) ((((Map.set Kindelia.Type) term.name) f.type) context)) term.body) type)))))) #term.name #term.type #term.expr #term.body (((Triple ((((Theory.WellTyped world) context) term.expr) term.type)) ((((term.type #term.type *) Empty) #term.type.name Empty) #term.type.rety ((((Theory.WellTyped world) ((((Map.set Kindelia.Type) term.name) term.type.rety) context)) term.body) type))) (Kindelia.Type.IsEffect type))) #term.expr ((((type #type *) Empty) #type.name Empty) #type.rety ((((Theory.WellTyped world) context) term.expr) type.rety)))