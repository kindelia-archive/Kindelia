#context #world #term #type #caller (((context #context Bool) ((((((((((term #term Bool) #term.name ((((((Map.get Kindelia.Type) term.name) context) # Bool) Bool.false) #var_type ((Kindelia.equal var_type) type))) #term.bond #term.args (((((Kindelia.get_bond world) term.bond) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main !otyp = ((Kindelia.equal bond.otyp) type); !ityp = ((((List.mapped ((Pair String) Kindelia.Type)) bond.args) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !args = ((((List.zip Kindelia.Term) Kindelia.Type) term.args) ityp); !args = (((List.all ((Pair Kindelia.Term) Kindelia.Type)) #x (((((Kindelia.check context) world) ((x # Kindelia.Term) #fst #snd fst)) ((x # Kindelia.Type) #fst #snd snd)) caller)) args); ((Bool.and otyp) args)))) #term.name #term.type #term.expr #term.body !expr = (((((Kindelia.check context) world) term.expr) term.type) caller); !ctx2 = ((((Map.set Kindelia.Type) term.name) term.type) context); !body = (((((Kindelia.check ctx2) world) term.body) type) caller); ((Bool.and expr) body)) #term.ctor #term.vals (((type #type Bool) Bool.false) #type.name (((((Kindelia.get_data world) type.name) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors ((((((List.get Kindelia.Constructor) term.ctor) data.constructors) # Bool) Bool.false) #ctor !ctor = ctor; ((ctor #ctor Bool) #ctor.name #ctor.args !size = ((Nat.eql ((List.length Kindelia.Term) term.vals)) ((List.length ((Pair String) Kindelia.Type)) ctor.args)); !ftyp = ((((List.mapped ((Pair String) Kindelia.Type)) ctor.args) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !vals = ((((List.zip Kindelia.Term) Kindelia.Type) term.vals) ftyp); !vals = (((List.all ((Pair Kindelia.Term) Kindelia.Type)) #x (((((Kindelia.check context) world) ((x # Kindelia.Term) #fst #snd fst)) ((x # Kindelia.Type) #fst #snd snd)) caller)) vals); ((Bool.and size) vals))))))) #term.name #term.data #term.cses (((((Kindelia.get_data world) term.data) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors !size = ((Nat.eql ((List.length Kindelia.Term) term.cses)) ((List.length Kindelia.Constructor) data.constructors)); !expr = (((((Kindelia.check context) world) (Kindelia.Term.var term.name)) (Kindelia.Type.data term.data)) caller); !cses = ((((((List.zipped_with Kindelia.Term) Kindelia.Constructor) term.cses) data.constructors) Bool) #case_body #case_ctor !nams = ((((List.map ((Pair String) Kindelia.Type)) String) #args ((String.concat term.name) ((String.concat ".") ((args # String) #fst #snd fst)))) ((case_ctor # (List ((Pair String) Kindelia.Type))) #name #args args)); !typs = ((((List.mapped ((Pair String) Kindelia.Type)) ((case_ctor # (List ((Pair String) Kindelia.Type))) #name #args args)) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !ctx2 = (((Kindelia.extend Kindelia.Type) context) ((((List.zip String) Kindelia.Type) nams) typs)); (((((Kindelia.check ctx2) world) case_body) type) caller)); ((Bool.and size) (List.and cses))))) #term.numb (((type #type Bool) Bool.true) #type.name Bool.false)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt !val0 = (((((Kindelia.check context) world) term.val0) Kindelia.Type.word) caller); !val1 = (((((Kindelia.check context) world) term.val1) Kindelia.Type.word) caller); !iflt = (((((Kindelia.check context) world) term.iflt) type) caller); !ifeq = (((((Kindelia.check context) world) term.ifeq) type) caller); !ifgt = (((((Kindelia.check context) world) term.ifgt) type) caller); ((Bool.and val0) ((Bool.and val1) ((Bool.and iflt) ((Bool.and ifeq) ifgt))))) #term.oper #term.val0 #term.val1 !val0 = (((((Kindelia.check context) world) term.val0) Kindelia.Type.word) caller); !val1 = (((((Kindelia.check context) world) term.val1) Kindelia.Type.word) caller); ((Bool.and val0) val1)) #term.bond #term.expr #term.cont (((((Kindelia.get_bond world) term.bond) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main !notf = ((List.is_empty ((Pair String) Kindelia.Type)) bond.args); !expr = (((((Kindelia.check context) world) term.expr) bond.otyp) caller); !cont = (((((Kindelia.check context) world) term.cont) type) caller); ((Bool.and notf) ((Bool.and expr) cont)))))) #context.size #context.key #context.val #context.left #context.right ((((((((((term #term Bool) #term.name ((((((Map.get Kindelia.Type) term.name) context) # Bool) Bool.false) #var_type ((Kindelia.equal var_type) type))) #term.bond #term.args (((((Kindelia.get_bond world) term.bond) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main !otyp = ((Kindelia.equal bond.otyp) type); !ityp = ((((List.mapped ((Pair String) Kindelia.Type)) bond.args) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !args = ((((List.zip Kindelia.Term) Kindelia.Type) term.args) ityp); !args = (((List.all ((Pair Kindelia.Term) Kindelia.Type)) #x (((((Kindelia.check context) world) ((x # Kindelia.Term) #fst #snd fst)) ((x # Kindelia.Type) #fst #snd snd)) caller)) args); ((Bool.and otyp) args)))) #term.name #term.type #term.expr #term.body !expr = (((((Kindelia.check context) world) term.expr) term.type) caller); !ctx2 = ((((Map.set Kindelia.Type) term.name) term.type) context); !body = (((((Kindelia.check ctx2) world) term.body) type) caller); ((Bool.and expr) body)) #term.ctor #term.vals (((type #type Bool) Bool.false) #type.name (((((Kindelia.get_data world) type.name) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors ((((((List.get Kindelia.Constructor) term.ctor) data.constructors) # Bool) Bool.false) #ctor !ctor = ctor; ((ctor #ctor Bool) #ctor.name #ctor.args !size = ((Nat.eql ((List.length Kindelia.Term) term.vals)) ((List.length ((Pair String) Kindelia.Type)) ctor.args)); !ftyp = ((((List.mapped ((Pair String) Kindelia.Type)) ctor.args) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !vals = ((((List.zip Kindelia.Term) Kindelia.Type) term.vals) ftyp); !vals = (((List.all ((Pair Kindelia.Term) Kindelia.Type)) #x (((((Kindelia.check context) world) ((x # Kindelia.Term) #fst #snd fst)) ((x # Kindelia.Type) #fst #snd snd)) caller)) vals); ((Bool.and size) vals))))))) #term.name #term.data #term.cses (((((Kindelia.get_data world) term.data) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors !size = ((Nat.eql ((List.length Kindelia.Term) term.cses)) ((List.length Kindelia.Constructor) data.constructors)); !expr = (((((Kindelia.check context) world) (Kindelia.Term.var term.name)) (Kindelia.Type.data term.data)) caller); !cses = ((((((List.zipped_with Kindelia.Term) Kindelia.Constructor) term.cses) data.constructors) Bool) #case_body #case_ctor !nams = ((((List.map ((Pair String) Kindelia.Type)) String) #args ((String.concat term.name) ((String.concat ".") ((args # String) #fst #snd fst)))) ((case_ctor # (List ((Pair String) Kindelia.Type))) #name #args args)); !typs = ((((List.mapped ((Pair String) Kindelia.Type)) ((case_ctor # (List ((Pair String) Kindelia.Type))) #name #args args)) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !ctx2 = (((Kindelia.extend Kindelia.Type) context) ((((List.zip String) Kindelia.Type) nams) typs)); (((((Kindelia.check ctx2) world) case_body) type) caller)); ((Bool.and size) (List.and cses))))) #term.numb (((type #type Bool) Bool.true) #type.name Bool.false)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt !val0 = (((((Kindelia.check context) world) term.val0) Kindelia.Type.word) caller); !val1 = (((((Kindelia.check context) world) term.val1) Kindelia.Type.word) caller); !iflt = (((((Kindelia.check context) world) term.iflt) type) caller); !ifeq = (((((Kindelia.check context) world) term.ifeq) type) caller); !ifgt = (((((Kindelia.check context) world) term.ifgt) type) caller); ((Bool.and val0) ((Bool.and val1) ((Bool.and iflt) ((Bool.and ifeq) ifgt))))) #term.oper #term.val0 #term.val1 !val0 = (((((Kindelia.check context) world) term.val0) Kindelia.Type.word) caller); !val1 = (((((Kindelia.check context) world) term.val1) Kindelia.Type.word) caller); ((Bool.and val0) val1)) #term.bond #term.expr #term.cont (((((Kindelia.get_bond world) term.bond) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main !notf = ((List.is_empty ((Pair String) Kindelia.Type)) bond.args); !expr = (((((Kindelia.check context) world) term.expr) bond.otyp) caller); !cont = (((((Kindelia.check context) world) term.cont) type) caller); ((Bool.and notf) ((Bool.and expr) cont))))))