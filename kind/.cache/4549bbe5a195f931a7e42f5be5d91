#context #world #term #type #caller (((context #context Bool) (((((((((((((term #term Bool) #term.name ((((((Map.get Kindelia.Type) term.name) context) # Bool) Bool.false) #var_type ((Kindelia.equal var_type) type))) #term.bond #term.args (((((Kindelia.get_bond world) term.bond) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.iprm #bond.otyp #bond.main !otyp = ((Kindelia.equal bond.otyp) type); !ityp = ((((List.mapped ((Pair String) Kindelia.Type)) bond.iprm) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !args = ((((List.zip Kindelia.Term) Kindelia.Type) term.args) ityp); !args = (((List.all ((Pair Kindelia.Term) Kindelia.Type)) #x (((((Kindelia.check context) world) ((x # Kindelia.Term) #fst #snd fst)) ((x # Kindelia.Type) #fst #snd snd)) caller)) args); ((Bool.and otyp) args)))) #term.name #term.type #term.expr #term.body !expr = (((((Kindelia.check context) world) term.expr) term.type) caller); !ctx2 = ((((Map.set Kindelia.Type) term.name) term.type) context); !body = (((((Kindelia.check ctx2) world) term.body) type) caller); ((Bool.and expr) body)) #term.ctor #term.vals ((((type #type Bool) Bool.false) #type.name (((((Kindelia.get_data world) type.name) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors (((((Kindelia.get_constructor_value data) term.ctor) # Bool) Bool.false) #ctor !ctor = ctor; ((ctor #ctor Bool) #ctor.name #ctor.fprm !size = ((Nat.eql ((List.length Kindelia.Term) term.vals)) ((List.length ((Pair String) Kindelia.Type)) ctor.fprm)); !ftyp = ((((List.mapped ((Pair String) Kindelia.Type)) ctor.fprm) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !vals = ((((List.zip Kindelia.Term) Kindelia.Type) term.vals) ftyp); !vals = (((List.all ((Pair Kindelia.Term) Kindelia.Type)) #x (((((Kindelia.check context) world) ((x # Kindelia.Term) #fst #snd fst)) ((x # Kindelia.Type) #fst #snd snd)) caller)) vals); ((Bool.and size) vals)))))) #type.rety Bool.false)) #term.name #term.data #term.cses (((((Kindelia.get_data world) term.data) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors !size = ((Nat.eql ((List.length Kindelia.Term) term.cses)) ((List.length Kindelia.Constructor) data.constructors)); !expr = (((((Kindelia.check context) world) (Kindelia.Term.var term.name)) (Kindelia.Type.data term.data)) caller); !cses = ((((((List.zipped_with Kindelia.Term) Kindelia.Constructor) term.cses) data.constructors) Bool) #case_body #case_ctor !nams = ((((List.map ((Pair String) Kindelia.Type)) String) #fprm ((String.concat term.name) ((String.concat ".") ((fprm # String) #fst #snd fst)))) ((case_ctor # (List ((Pair String) Kindelia.Type))) #name #fprm fprm)); !typs = ((((List.mapped ((Pair String) Kindelia.Type)) ((case_ctor # (List ((Pair String) Kindelia.Type))) #name #fprm fprm)) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !ctx2 = ((((Kindelia.extend Kindelia.Type) context) nams) typs); (((((Kindelia.check ctx2) world) case_body) type) caller)); ((Bool.and size) (List.and cses))))) #term.numb ((((type #type Bool) Bool.true) #type.name Bool.false) #type.rety Bool.false)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt !val0 = (((((Kindelia.check context) world) term.val0) Kindelia.Type.word) caller); !val1 = (((((Kindelia.check context) world) term.val1) Kindelia.Type.word) caller); !iflt = (((((Kindelia.check context) world) term.iflt) type) caller); !ifeq = (((((Kindelia.check context) world) term.ifeq) type) caller); !ifgt = (((((Kindelia.check context) world) term.ifgt) type) caller); ((Bool.and val0) ((Bool.and val1) ((Bool.and iflt) ((Bool.and ifeq) ifgt))))) #term.oper #term.val0 #term.val1 !val0 = (((((Kindelia.check context) world) term.val0) Kindelia.Type.word) caller); !val1 = (((((Kindelia.check context) world) term.val1) Kindelia.Type.word) caller); ((Bool.and val0) val1)) #term.file #term.expr #term.body ((((type #type Bool) Bool.false) #type.name Bool.false) #type.rety (((((Kindelia.get_file world) term.file) # Bool) Bool.false) #file !file = file; ((file #file Bool) #file.name #file.ownr #file.type #file.expr !empty = ((List.is_empty String) file.ownr); !valid = (((Maybe.if String) #x (((List.in String) (String.eql x)) file.ownr)) caller); !ownr = ((Bool.or empty) valid); !expr = (((((Kindelia.check context) world) term.expr) file.type) caller); !body = (((((Kindelia.check context) world) term.body) type) caller); ((Bool.and ownr) ((Bool.and expr) body)))))) #term.name #term.file #term.body ((((type #type Bool) Bool.false) #type.name Bool.false) #type.rety (((((Kindelia.get_file world) term.file) # Bool) Bool.false) #file !file = file; ((file #file Bool) #file.name #file.ownr #file.type #file.expr !ctx2 = ((((Kindelia.extend Kindelia.Type) context) (((List.cons String) term.name) (List.nil String))) (((List.cons Kindelia.Type) file.type) (List.nil Kindelia.Type))); !body = (((((Kindelia.check ctx2) world) term.body) type) caller); body)))) #term.name #term.type #term.expr #term.body ((((type #type Bool) Bool.false) #type.name Bool.false) #type.rety !expr = (((((Kindelia.check context) world) term.expr) (Kindelia.Type.effe term.type)) caller); !ctx2 = ((((Map.set Kindelia.Type) term.name) term.type) context); !body = (((((Kindelia.check ctx2) world) term.body) type) caller); ((Bool.and expr) body))) #term.expr ((((type #type Bool) Bool.false) #type.name Bool.false) #type.rety (((((Kindelia.check context) world) term.expr) type.rety) caller)))) #context.size #context.key #context.val #context.left #context.right (((((((((((((term #term Bool) #term.name ((((((Map.get Kindelia.Type) term.name) context) # Bool) Bool.false) #var_type ((Kindelia.equal var_type) type))) #term.bond #term.args (((((Kindelia.get_bond world) term.bond) # Bool) Bool.false) #bond !bond = bond; ((bond #bond Bool) #bond.name #bond.iprm #bond.otyp #bond.main !otyp = ((Kindelia.equal bond.otyp) type); !ityp = ((((List.mapped ((Pair String) Kindelia.Type)) bond.iprm) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !args = ((((List.zip Kindelia.Term) Kindelia.Type) term.args) ityp); !args = (((List.all ((Pair Kindelia.Term) Kindelia.Type)) #x (((((Kindelia.check context) world) ((x # Kindelia.Term) #fst #snd fst)) ((x # Kindelia.Type) #fst #snd snd)) caller)) args); ((Bool.and otyp) args)))) #term.name #term.type #term.expr #term.body !expr = (((((Kindelia.check context) world) term.expr) term.type) caller); !ctx2 = ((((Map.set Kindelia.Type) term.name) term.type) context); !body = (((((Kindelia.check ctx2) world) term.body) type) caller); ((Bool.and expr) body)) #term.ctor #term.vals ((((type #type Bool) Bool.false) #type.name (((((Kindelia.get_data world) type.name) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors (((((Kindelia.get_constructor_value data) term.ctor) # Bool) Bool.false) #ctor !ctor = ctor; ((ctor #ctor Bool) #ctor.name #ctor.fprm !size = ((Nat.eql ((List.length Kindelia.Term) term.vals)) ((List.length ((Pair String) Kindelia.Type)) ctor.fprm)); !ftyp = ((((List.mapped ((Pair String) Kindelia.Type)) ctor.fprm) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !vals = ((((List.zip Kindelia.Term) Kindelia.Type) term.vals) ftyp); !vals = (((List.all ((Pair Kindelia.Term) Kindelia.Type)) #x (((((Kindelia.check context) world) ((x # Kindelia.Term) #fst #snd fst)) ((x # Kindelia.Type) #fst #snd snd)) caller)) vals); ((Bool.and size) vals)))))) #type.rety Bool.false)) #term.name #term.data #term.cses (((((Kindelia.get_data world) term.data) # Bool) Bool.false) #data !data = data; ((data #data Bool) #data.name #data.constructors !size = ((Nat.eql ((List.length Kindelia.Term) term.cses)) ((List.length Kindelia.Constructor) data.constructors)); !expr = (((((Kindelia.check context) world) (Kindelia.Term.var term.name)) (Kindelia.Type.data term.data)) caller); !cses = ((((((List.zipped_with Kindelia.Term) Kindelia.Constructor) term.cses) data.constructors) Bool) #case_body #case_ctor !nams = ((((List.map ((Pair String) Kindelia.Type)) String) #fprm ((String.concat term.name) ((String.concat ".") ((fprm # String) #fst #snd fst)))) ((case_ctor # (List ((Pair String) Kindelia.Type))) #name #fprm fprm)); !typs = ((((List.mapped ((Pair String) Kindelia.Type)) ((case_ctor # (List ((Pair String) Kindelia.Type))) #name #fprm fprm)) Kindelia.Type) ((Pair.snd String) Kindelia.Type)); !ctx2 = ((((Kindelia.extend Kindelia.Type) context) nams) typs); (((((Kindelia.check ctx2) world) case_body) type) caller)); ((Bool.and size) (List.and cses))))) #term.numb ((((type #type Bool) Bool.true) #type.name Bool.false) #type.rety Bool.false)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt !val0 = (((((Kindelia.check context) world) term.val0) Kindelia.Type.word) caller); !val1 = (((((Kindelia.check context) world) term.val1) Kindelia.Type.word) caller); !iflt = (((((Kindelia.check context) world) term.iflt) type) caller); !ifeq = (((((Kindelia.check context) world) term.ifeq) type) caller); !ifgt = (((((Kindelia.check context) world) term.ifgt) type) caller); ((Bool.and val0) ((Bool.and val1) ((Bool.and iflt) ((Bool.and ifeq) ifgt))))) #term.oper #term.val0 #term.val1 !val0 = (((((Kindelia.check context) world) term.val0) Kindelia.Type.word) caller); !val1 = (((((Kindelia.check context) world) term.val1) Kindelia.Type.word) caller); ((Bool.and val0) val1)) #term.file #term.expr #term.body ((((type #type Bool) Bool.false) #type.name Bool.false) #type.rety (((((Kindelia.get_file world) term.file) # Bool) Bool.false) #file !file = file; ((file #file Bool) #file.name #file.ownr #file.type #file.expr !empty = ((List.is_empty String) file.ownr); !valid = (((Maybe.if String) #x (((List.in String) (String.eql x)) file.ownr)) caller); !ownr = ((Bool.or empty) valid); !expr = (((((Kindelia.check context) world) term.expr) file.type) caller); !body = (((((Kindelia.check context) world) term.body) type) caller); ((Bool.and ownr) ((Bool.and expr) body)))))) #term.name #term.file #term.body ((((type #type Bool) Bool.false) #type.name Bool.false) #type.rety (((((Kindelia.get_file world) term.file) # Bool) Bool.false) #file !file = file; ((file #file Bool) #file.name #file.ownr #file.type #file.expr !ctx2 = ((((Kindelia.extend Kindelia.Type) context) (((List.cons String) term.name) (List.nil String))) (((List.cons Kindelia.Type) file.type) (List.nil Kindelia.Type))); !body = (((((Kindelia.check ctx2) world) term.body) type) caller); body)))) #term.name #term.type #term.expr #term.body ((((type #type Bool) Bool.false) #type.name Bool.false) #type.rety !expr = (((((Kindelia.check context) world) term.expr) (Kindelia.Type.effe term.type)) caller); !ctx2 = ((((Map.set Kindelia.Type) term.name) term.type) context); !body = (((((Kindelia.check ctx2) world) term.body) type) caller); ((Bool.and expr) body))) #term.expr ((((type #type Bool) Bool.false) #type.name Bool.false) #type.rety (((((Kindelia.check context) world) term.expr) type.rety) caller))))