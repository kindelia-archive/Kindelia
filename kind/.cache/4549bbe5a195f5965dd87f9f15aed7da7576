#world ((((((Monad.bind Parser) Parser.monad) Unit) Kindelia.File) (Kindelia.parse.text "file")) # ((((((Monad.bind Parser) Parser.monad) (Maybe (List String))) Kindelia.File) ((Parser.maybe (List String)) ((((((Monad.bind Parser) Parser.monad) (List String)) (List String)) ((Parser.many String) ((((((Monad.bind Parser) Parser.monad) String) String) Kindelia.parse.name) #name ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) String) ((Parser.maybe Unit) (Kindelia.parse.text ","))) # ((((Monad.pure Parser) Parser.monad) String) name))))) #ownr (((ownr #ownr (Parser (List String))) ((((Monad.pure Parser) Parser.monad) (List String)) (List.nil String))) #ownr.head #ownr.tail ((((((Monad.bind Parser) Parser.monad) Unit) (List String)) (Kindelia.parse.text "@")) # ((((Monad.pure Parser) Parser.monad) (List String)) ownr)))))) #ownr !ownr = (((Maybe.default (List String)) ownr) (List.nil String)); ((((((Monad.bind Parser) Parser.monad) String) Kindelia.File) Kindelia.parse.name) #name ((((((Monad.bind Parser) Parser.monad) Unit) Kindelia.File) (Kindelia.parse.text ":")) # ((((((Monad.bind Parser) Parser.monad) Kindelia.Type) Kindelia.File) (Kindelia.parse.type world)) #type ((((((Monad.bind Parser) Parser.monad) Unit) Kindelia.File) (Kindelia.parse.text "=")) # ((((((Monad.bind Parser) Parser.monad) Kindelia.Term) Kindelia.File) (Kindelia.parse.term world)) #expr ((((Monad.pure Parser) Parser.monad) Kindelia.File) ((((Kindelia.File.new name) ownr) type) expr)))))))))