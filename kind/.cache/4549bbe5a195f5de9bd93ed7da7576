#state ((state # Kindelia.Runtime.Term) #world #subst #fresh #gas #term ((((((((((term #term Kindelia.Runtime.Term) #term.name !term = (((Maybe.default Kindelia.Term) (((Map.get Kindelia.Term) term.name) subst)) term); (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term)) # Kindelia.Runtime.Term) #world #subst #fresh #gas #term ((((((((((term #term Kindelia.Runtime.Term) #term.name ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) gas) term)) #term.bond #term.args ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) gas) term)) #term.name #term.type #term.expr #term.body ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) gas) term)) #term.ctor #term.vals !ivals = ((((List.imapped Kindelia.Term) term.vals) ((Pair String) Kindelia.Term)) #i #x ((((Pair.new String) Kindelia.Term) ((String.concat "$") (Nat.show ((Nat.add fresh) i)))) x)); !subst = (((Kindelia.extend Kindelia.Term) subst) ivals); !term = ((Kindelia.Term.create term.ctor) ((((List.map ((Pair String) Kindelia.Term)) Kindelia.Term) #x (Kindelia.Term.var ((x # String) #fst #snd fst))) ivals)); !subst = ((((Map.set Kindelia.Term) term.name) term) subst); !size = ((List.length ((Pair String) Kindelia.Term)) ivals); !fresh = ((Nat.add fresh) size); !gas = ((Nat.add (Kindelia.cost.copy size)) gas); ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term)) #term.name #term.data #term.cses ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) gas) term)) #term.numb ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) gas) term)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) gas) term)) #term.oper #term.val0 #term.val1 ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) gas) term)) #term.bond #term.expr #term.cont ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) gas) term)))) #term.bond #term.args (((((Kindelia.get_bond world) term.bond) # Kindelia.Runtime.Term) state) #bond !bond = bond; ((bond #bond Kindelia.Runtime.Term) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main !inam = ((((List.mapped ((Pair String) Kindelia.Type)) bond.args) String) ((Pair.fst String) Kindelia.Type)); (((((Kindelia.rename.many ((Map.from_list String) (List.nil ((Pair String) String)))) fresh) inam) # Kindelia.Runtime.Term) #table #fresh #inam ((((((Kindelia.sanitize world) table) fresh) bond.main) # Kindelia.Runtime.Term) #fresh #main !subst = (((Kindelia.extend Kindelia.Term) subst) ((((List.zip String) Kindelia.Term) inam) term.args)); !gas = ((Nat.add (Kindelia.cost.create ((List.length Kindelia.Term) term.args))) gas); (Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) main))))))) #term.name #term.type #term.expr #term.body !subst = ((((Map.set Kindelia.Term) term.name) term.expr) subst); !gas = ((Nat.add Kindelia.cost.let) gas); (Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term.body))) #term.ctor #term.vals state) #term.name #term.data #term.cses (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) (((Maybe.default Kindelia.Term) (((Map.get Kindelia.Term) term.name) subst)) (Kindelia.Term.word (U64.from_nat +0))))) # Kindelia.Runtime.Term) #world #subst #fresh #gas #expr ((((((((((expr #expr Kindelia.Runtime.Term) #expr.name state) #expr.bond #expr.args state) #expr.name #expr.type #expr.expr #expr.body state) #expr.ctor #expr.vals (((((Kindelia.get_data world) term.data) # Kindelia.Runtime.Term) state) #data !data = data; ((data #data Kindelia.Runtime.Term) #data.name #data.constructors ((((((List.get Kindelia.Constructor) expr.ctor) data.constructors) # Kindelia.Runtime.Term) state) #ctor !ctor = ctor; ((ctor #ctor Kindelia.Runtime.Term) #ctor.name #ctor.args ((((((List.get Kindelia.Term) expr.ctor) term.cses) # Kindelia.Runtime.Term) state) #body !nams = ((((List.map ((Pair String) Kindelia.Type)) String) #args ((String.concat term.name) ((String.concat ".") ((args # String) #fst #snd fst)))) ((ctor # (List ((Pair String) Kindelia.Type))) #name #args args)); !subst = (((Kindelia.extend Kindelia.Term) subst) ((((List.zip String) Kindelia.Term) nams) expr.vals)); !gas = ((Nat.add (Kindelia.cost.match ((List.length Kindelia.Term) expr.vals))) gas); (Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) body)))))))) #expr.name #expr.data #expr.cses state) #expr.numb state) #expr.val0 #expr.val1 #expr.iflt #expr.ifeq #expr.ifgt state) #expr.oper #expr.val0 #expr.val1 state) #expr.bond #expr.expr #expr.cont state))) #term.numb state) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term.val0)) # Kindelia.Runtime.Term) #world #subst #fresh #gas #val0 (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term.val1)) # Kindelia.Runtime.Term) #world #subst #fresh #gas #val1 !term = ((((((((((val0 #val0 Kindelia.Term) #val0.name ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.bond #val0.args ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.name #val0.type #val0.expr #val0.body ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.ctor #val0.vals ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.name #val0.data #val0.cses ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.numb ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb ((((((U64.cmp val0.numb) val1.numb) #self Kindelia.Term) term.iflt) term.ifeq) term.ifgt)) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.val0 #val0.val1 #val0.iflt #val0.ifeq #val0.ifgt ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.oper #val0.val0 #val0.val1 ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.bond #val0.expr #val0.cont ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)); !gas = ((Nat.add Kindelia.cost.compare) gas); ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term)))) #term.oper #term.val0 #term.val1 (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term.val0)) # Kindelia.Runtime.Term) #world #subst #fresh #gas #val0 (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term.val1)) # Kindelia.Runtime.Term) #world #subst #fresh #gas #val1 !term = ((((((((((val0 #val0 Kindelia.Term) #val0.name ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.bond #val0.args ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.name #val0.type #val0.expr #val0.body ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.ctor #val0.vals ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.name #val0.data #val0.cses ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.numb ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb (((((((((term.oper #term.oper Kindelia.Term) (Kindelia.Term.word ((U64.add val0.numb) val1.numb))) (Kindelia.Term.word ((U64.sub val0.numb) val1.numb))) (Kindelia.Term.word ((U64.mul val0.numb) val1.numb))) (Kindelia.Term.word ((U64.div val0.numb) val1.numb))) (Kindelia.Term.word ((U64.mod val0.numb) val1.numb))) (Kindelia.Term.word ((U64.or val0.numb) val1.numb))) (Kindelia.Term.word ((U64.and val0.numb) val1.numb))) (Kindelia.Term.word ((U64.xor val0.numb) val1.numb)))) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.val0 #val0.val1 #val0.iflt #val0.ifeq #val0.ifgt ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.oper #val0.val0 #val0.val1 ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.bond #val0.expr #val0.cont ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.bond #val1.args term) #val1.name #val1.type #val1.expr #val1.body term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)); !gas = ((Nat.add Kindelia.cost.operate) gas); ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term)))) #term.bond #term.expr #term.cont (((((Kindelia.get_bond world) term.bond) # Kindelia.Runtime.Term) state) #bond !bond = bond; ((bond #bond Kindelia.Runtime.Term) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main (((Kindelia.normalize ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term.expr)) # Kindelia.Runtime.Term) #world #subst #fresh #gas #expr !entry = (Kindelia.Entry.bond ((bond # Kindelia.Bond) #name #ownr #args #otyp #main (((((Kindelia.Bond.new name) ownr) args) otyp) expr))); !world = ((world # Kindelia.World) #names #entry ((Kindelia.World.new names) ((((Map.set Kindelia.Entry) term.bond) entry^1) entry))); !gas = ((Nat.add Kindelia.cost.bind) gas); (Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) gas) term.cont)))))))