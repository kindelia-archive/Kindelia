#state ((state # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #term ((((((((((term #term (Kindelia.Runtime Kindelia.Term)) #term.name (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) (((Maybe.default Kindelia.Term) (((Map.get Kindelia.Term) term.name) subst)) term))) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #term ((((((Kindelia.Runtime.new Kindelia.Term) world) ((((Map.set Kindelia.Term) term.name) term) subst)) fresh) costs) term))) #term.name #term.type #term.expr #term.body (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term.expr)) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #expr !subst = ((((Map.set Kindelia.Term) term.name) expr) subst); !costs = ((Nat.add Kindelia.cost.let) costs); (Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term.body)))) #term.bond #term.args (((((Kindelia.get_bond world) term.bond) # (Kindelia.Runtime Kindelia.Term)) state) #bond !bond = bond; ((bond #bond (Kindelia.Runtime Kindelia.Term)) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main !nam0 = ((((List.map ((Pair String) Kindelia.Type)) String) #x ((x # String) #fst #snd fst)) bond.args); ((((Kindelia.fresh.many fresh) ((List.length String) nam0)) # (Kindelia.Runtime Kindelia.Term)) #fresh #nam1 ((((((Kindelia.sanitize world) fresh) (((Kindelia.extend String) ((Map.from_list String) (List.nil ((Pair String) String)))) ((((List.zip String) String) nam0) nam1))) bond.main) # (Kindelia.Runtime Kindelia.Term)) #fresh #main (((Kindelia.reduce.many ((((((Kindelia.Runtime.new (List Kindelia.Term)) world) subst) fresh) costs) term.args)) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #args !subst = (((Kindelia.extend Kindelia.Term) subst) ((((List.zip String) Kindelia.Term) nam1) args)); !costs = ((Nat.add (Kindelia.cost.create ((List.length Kindelia.Term) term.args))) costs); (Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) main)))))))) #term.ctor #term.vals (((Kindelia.reduce.many ((((((Kindelia.Runtime.new (List Kindelia.Term)) world) subst) fresh) costs) term.vals)) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #vals ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) ((Kindelia.Term.create term.ctor) vals)))) #term.name #term.data #term.cses (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) (((Maybe.default Kindelia.Term) (((Map.get Kindelia.Term) term.name) subst)) (Kindelia.Term.word (U64.from_nat +0))))) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #expr ((((((((((expr #expr (Kindelia.Runtime Kindelia.Term)) #expr.name state) #expr.name #expr.type #expr.expr #expr.body state) #expr.bond #expr.args state) #expr.ctor #expr.vals (((((Kindelia.get_data world) term.data) # (Kindelia.Runtime Kindelia.Term)) state) #data !data = data; ((data #data (Kindelia.Runtime Kindelia.Term)) #data.name #data.ctrs ((((((List.get Kindelia.Constructor) expr.ctor) data.ctrs) # (Kindelia.Runtime Kindelia.Term)) state) #ctor !ctor = ctor; ((ctor #ctor (Kindelia.Runtime Kindelia.Term)) #ctor.name #ctor.args ((((((List.get Kindelia.Term) expr.ctor) term.cses) # (Kindelia.Runtime Kindelia.Term)) state) #body !nams = ((((List.map ((Pair String) Kindelia.Type)) String) #args ((String.concat term.name) ((String.concat ".") ((args # String) #fst #snd fst)))) ((ctor # Kindelia.Args) #name #args args)); !subst = (((Kindelia.extend Kindelia.Term) subst) ((((List.zip String) Kindelia.Term) nams) expr.vals)); !costs = ((Nat.add (Kindelia.cost.match ((List.length Kindelia.Term) expr.vals))) costs); (Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) body)))))))) #expr.name #expr.data #expr.cses state) #expr.numb state) #expr.val0 #expr.val1 #expr.iflt #expr.ifeq #expr.ifgt state) #expr.oper #expr.val0 #expr.val1 state) #expr.bond #expr.expr #expr.cont state))) #term.numb ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term)) #term.val0 #term.val1 #term.iflt #term.ifeq #term.ifgt (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term.val0)) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #val0 (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term.val1)) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #val1 !term = ((((((((((val0 #val0 Kindelia.Term) #val0.name ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.name #val0.type #val0.expr #val0.body ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.bond #val0.args ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.ctor #val0.vals ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.name #val0.data #val0.cses ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.numb ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb ((((((U64.cmp val0.numb) val1.numb) #self Kindelia.Term) term.iflt) term.ifeq) term.ifgt)) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.val0 #val0.val1 #val0.iflt #val0.ifeq #val0.ifgt ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.oper #val0.val0 #val0.val1 ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.bond #val0.expr #val0.cont ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)); !costs = ((Nat.add Kindelia.cost.compare) costs); ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term)))) #term.oper #term.val0 #term.val1 (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term.val0)) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #val0 (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term.val1)) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #val1 !term = ((((((((((val0 #val0 Kindelia.Term) #val0.name ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.name #val0.type #val0.expr #val0.body ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.bond #val0.args ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.ctor #val0.vals ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.name #val0.data #val0.cses ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.numb ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb (((((((((term.oper #term.oper Kindelia.Term) (Kindelia.Term.word ((U64.add val0.numb) val1.numb))) (Kindelia.Term.word ((U64.sub val0.numb) val1.numb))) (Kindelia.Term.word ((U64.mul val0.numb) val1.numb))) (Kindelia.Term.word ((U64.div val0.numb) val1.numb))) (Kindelia.Term.word ((U64.mod val0.numb) val1.numb))) (Kindelia.Term.word ((U64.or val0.numb) val1.numb))) (Kindelia.Term.word ((U64.and val0.numb) val1.numb))) (Kindelia.Term.word ((U64.xor val0.numb) val1.numb)))) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.val0 #val0.val1 #val0.iflt #val0.ifeq #val0.ifgt ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.oper #val0.val0 #val0.val1 ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)) #val0.bond #val0.expr #val0.cont ((((((((((val1 #val1 Kindelia.Term) #val1.name term) #val1.name #val1.type #val1.expr #val1.body term) #val1.bond #val1.args term) #val1.ctor #val1.vals term) #val1.name #val1.data #val1.cses term) #val1.numb term) #val1.val0 #val1.val1 #val1.iflt #val1.ifeq #val1.ifgt term) #val1.oper #val1.val0 #val1.val1 term) #val1.bond #val1.expr #val1.cont term)); !costs = ((Nat.add Kindelia.cost.operate) costs); ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term)))) #term.bond #term.expr #term.cont (((((Kindelia.get_bond world) term.bond) # (Kindelia.Runtime Kindelia.Term)) state) #bond !bond = bond; ((bond #bond (Kindelia.Runtime Kindelia.Term)) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main (((Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term.expr)) # (Kindelia.Runtime Kindelia.Term)) #world #subst #fresh #costs #expr !entry = (Kindelia.Entry.bond ((bond # Kindelia.Bond) #name #ownr #args #otyp #main (((((Kindelia.Bond.new name) ownr) args) otyp) expr))); !world = ((world # Kindelia.World) #names #entry ((Kindelia.World.new names) ((((Map.set Kindelia.Entry) term.bond) entry^1) entry))); !costs = ((Nat.add Kindelia.cost.bind) costs); (Kindelia.reduce ((((((Kindelia.Runtime.new Kindelia.Term) world) subst) fresh) costs) term.cont)))))))