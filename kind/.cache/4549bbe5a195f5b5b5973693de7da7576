#world #transaction (((((transaction #transaction (Maybe ((Pair Kindelia.World) String))) #transaction.data !data = transaction.data; ((data #data (Maybe ((Pair Kindelia.World) String))) #data.name #data.constructors ((((((Map.get Kindelia.Entry) data.name) ((world # (Map Kindelia.Entry)) #names #entry entry)) #got_type (Maybe ((Pair Kindelia.World) String))) !world = ((world # Kindelia.World) #names #entry ((Kindelia.World.new names) ((((Map.set Kindelia.Entry) data.name) (Kindelia.Entry.data data)) entry))); ((Maybe.some ((Pair Kindelia.World) String)) ((((Pair.new Kindelia.World) String) world) ((String.concat "[data] ") data.name)))) #got_type.value (Maybe.none ((Pair Kindelia.World) String))))) #transaction.bond !bond = transaction.bond; ((bond #bond (Maybe ((Pair Kindelia.World) String))) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main ((((((Map.get Kindelia.Entry) bond.name) ((world # (Map Kindelia.Entry)) #names #entry entry)) #got (Maybe ((Pair Kindelia.World) String))) !world = ((world # Kindelia.World) #names #entry ((Kindelia.World.new names) ((((Map.set Kindelia.Entry) bond.name) (Kindelia.Entry.bond bond)) entry))); (((((List.unzip String) Kindelia.Type) bond.args) # (Maybe ((Pair Kindelia.World) String))) #inam #ityp !context = (((Kindelia.extend Kindelia.Type) ((Map.from_list Kindelia.Type) (List.nil ((Pair String) Kindelia.Type)))) ((((List.zip String) Kindelia.Type) inam) ityp)); ((((((((Kindelia.check context) world) bond.main) bond.otyp) ((Maybe.some String) bond.name)) # (Maybe ((Pair Kindelia.World) String))) ((Maybe.some ((Pair Kindelia.World) String)) ((((Pair.new Kindelia.World) String) world) ((String.concat "[bond] ") bond.name)))) (Maybe.none ((Pair Kindelia.World) String))))) #got.value (Maybe.none ((Pair Kindelia.World) String))))) #transaction.eval !eval = transaction.eval; ((eval #eval (Maybe ((Pair Kindelia.World) String))) #eval.term #eval.type ((((((((Kindelia.check ((Map.from_list Kindelia.Type) (List.nil ((Pair String) Kindelia.Type)))) world) eval.term) eval.type) (Maybe.none String)) # (Maybe ((Pair Kindelia.World) String))) !fresh = +0; ((((((Kindelia.sanitize world) ((Map.from_list String) (List.nil ((Pair String) String)))) fresh) eval.term) # (Maybe ((Pair Kindelia.World) String))) #fresh #term (((((eval.type #eval.type Kindelia.Runtime.Term) (Kindelia.normalize ((((((Kindelia.Runtime.new Kindelia.Term) world) ((Map.from_list Kindelia.Term) (List.nil ((Pair String) Kindelia.Term)))) fresh) +0) term))) #eval.type.name (Kindelia.normalize ((((((Kindelia.Runtime.new Kindelia.Term) world) ((Map.from_list Kindelia.Term) (List.nil ((Pair String) Kindelia.Term)))) fresh) +0) term))) # (Maybe ((Pair Kindelia.World) String))) #world #subst #fresh #gas #term ((Maybe.some ((Pair Kindelia.World) String)) ((((Pair.new Kindelia.World) String) world) ((String.concat "[eval] ") ((String.concat "(gas: ") ((String.concat (Nat.show gas)) ((String.concat ") ") (((Kindelia.show.term world) eval.type) term)))))))))) (Maybe.none ((Pair Kindelia.World) String))))) #transaction.name !name = transaction.name; !world = ((world # Kindelia.World) #names #entry ((Kindelia.World.new (((List.concat String) ((world # (List String)) #names #entry names)) (((List.cons String) name) (List.nil String)))) entry)); ((Maybe.some ((Pair Kindelia.World) String)) ((((Pair.new Kindelia.World) String) world) ((String.concat "[name] ") name))))