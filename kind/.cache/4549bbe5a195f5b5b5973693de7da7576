#world #transaction (((((transaction #transaction (Maybe ((Pair Kindelia.World) String))) #transaction.data !data = transaction.data; ((data #data (Maybe ((Pair Kindelia.World) String))) #data.name #data.ctrs ((((((Map.get Kindelia.Entry) data.name) ((world # (Map Kindelia.Entry)) #names #entry entry)) #got_type (Maybe ((Pair Kindelia.World) String))) !world = ((world # Kindelia.World) #names #entry ((Kindelia.World.new names) ((((Map.set Kindelia.Entry) data.name) (Kindelia.Entry.data data)) entry))); ((Maybe.some ((Pair Kindelia.World) String)) ((((Pair.new Kindelia.World) String) world) ((String.concat "[data] ") data.name)))) #got_type.value (Maybe.none ((Pair Kindelia.World) String))))) #transaction.bond !bond = transaction.bond; ((bond #bond (Maybe ((Pair Kindelia.World) String))) #bond.name #bond.ownr #bond.args #bond.otyp #bond.main ((((((Map.get Kindelia.Entry) bond.name) ((world # (Map Kindelia.Entry)) #names #entry entry)) #got (Maybe ((Pair Kindelia.World) String))) !world = ((world # Kindelia.World) #names #entry ((Kindelia.World.new names) ((((Map.set Kindelia.Entry) bond.name) (Kindelia.Entry.bond bond)) entry))); (((((List.unzip String) Kindelia.Type) bond.args) # (Maybe ((Pair Kindelia.World) String))) #inam #ityp !context = (((Kindelia.extend Kindelia.Type) ((Map.from_list Kindelia.Type) (List.nil ((Pair String) Kindelia.Type)))) ((((List.zip String) Kindelia.Type) inam) ityp)); (((((((Kindelia.check context) world) bond.main) bond.otyp) # (Maybe ((Pair Kindelia.World) String))) ((Maybe.some ((Pair Kindelia.World) String)) ((((Pair.new Kindelia.World) String) world) ((String.concat "[bond] ") bond.name)))) (Maybe.none ((Pair Kindelia.World) String))))) #got.value (Maybe.none ((Pair Kindelia.World) String))))) #transaction.eval !eval = transaction.eval; ((eval #eval (Maybe ((Pair Kindelia.World) String))) #eval.auth #eval.term #eval.type !auth = (((eval.auth #eval.auth Bool) (((Debug.log Bool) ".") # Bool.true)) #eval.auth.value (((Debug.log Bool) "a") # !call = ((Kindelia.Term.call ((eval.auth.value # String) #bond #args bond)) ((eval.auth.value # (List Kindelia.Term)) #bond #args args)); (((Debug.log Bool) "b") # (((((((Kindelia.check ((Map.from_list Kindelia.Type) (List.nil ((Pair String) Kindelia.Type)))) world) call) Kindelia.Type.word) # Bool) (((Debug.log Bool) "c") # (((Kindelia.normalize ((((((Kindelia.Runtime.new Kindelia.Term) world) ((Map.from_list Kindelia.Term) (List.nil ((Pair String) Kindelia.Term)))) +0) +0) call)) # Bool) #world #subst #fresh #gas #norm (((Debug.log Bool) ((String.concat "> ") (((Kindelia.show.term world) Kindelia.Type.word) norm))) # ((((((((((norm #norm Bool) #norm.name Bool.false) #norm.bond #norm.args Bool.false) #norm.name #norm.type #norm.expr #norm.body Bool.false) #norm.ctor #norm.vals Bool.false) #norm.name #norm.data #norm.cses Bool.false) #norm.numb (((Debug.log Bool) "d") # ((U64.eql norm.numb) (Nat.to_u64 +1)))) #norm.val0 #norm.val1 #norm.iflt #norm.ifeq #norm.ifgt Bool.false) #norm.oper #norm.val0 #norm.val1 Bool.false) #norm.bond #norm.expr #norm.cont Bool.false))))) (((Debug.log Bool) "f") # Bool.false))))); (((((Bool.and auth) ((((Kindelia.check ((Map.from_list Kindelia.Type) (List.nil ((Pair String) Kindelia.Type)))) world) eval.term) eval.type)) # (Maybe ((Pair Kindelia.World) String))) (((Debug.log (Maybe ((Pair Kindelia.World) String))) "A") # ((((((Kindelia.sanitize world) ((Map.from_list String) (List.nil ((Pair String) String)))) +0) eval.term) # (Maybe ((Pair Kindelia.World) String))) #fresh #term (((Kindelia.normalize ((((((Kindelia.Runtime.new Kindelia.Term) world) ((Map.from_list Kindelia.Term) (List.nil ((Pair String) Kindelia.Term)))) fresh) +0) term)) # (Maybe ((Pair Kindelia.World) String))) #world #subst #fresh #gas #term ((Maybe.some ((Pair Kindelia.World) String)) ((((Pair.new Kindelia.World) String) world) ((String.concat "[eval] ") ((String.concat "(gas: ") ((String.concat (Nat.show gas)) ((String.concat ") ") (((Kindelia.show.term world) eval.type) term))))))))))) (((Debug.log (Maybe ((Pair Kindelia.World) String))) "B") # (Maybe.none ((Pair Kindelia.World) String)))))) #transaction.name !name = transaction.name; !world = ((world # Kindelia.World) #names #entry ((Kindelia.World.new (((List.concat String) ((world # (List String)) #names #entry names)) (((List.cons String) name) (List.nil String)))) entry)); ((Maybe.some ((Pair Kindelia.World) String)) ((((Pair.new Kindelia.World) String) world) ((String.concat "[name] ") name))))