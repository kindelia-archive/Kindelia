// Litereum: a minimal decentralized computer
// ==========================================

// Types
// -----

// A Litereum term
type Litereum.Term {
  // A variable
  var(
    name: String
  )
  // Call external function
  call(
    bond: String
    args: List<Litereum.Term>
  )
  // Assigns a variable
  let(
    name: String
    type: Litereum.Type
    expr: Litereum.Term
    body: Litereum.Term
  )
  // Creates a value
  create(
    ctor: String
    vals: List<Litereum.Term>
  )
  // Pattern-matches a value
  match(
    name: String
    data: String
    cses: List<Litereum.Term>
  )
  // Creates a new 64-bit word
  word(
    numb: U64
  )
  // Compares two words
  compare(
    val0: Litereum.Term
    val1: Litereum.Term
    iflt: Litereum.Term
    ifeq: Litereum.Term
    ifgt: Litereum.Term
  )
  // Binary operation on words
  operate(
    oper: Litereum.Operation
    val0: Litereum.Term
    val1: Litereum.Term
  )
  // Effect: sets a file
  set(
    file: String
    expr: Litereum.Term
    body: Litereum.Term
  )
  // Effect: gets a file
  get(
    name: String
    file: String
    body: Litereum.Term
  )
  // Effect: chains two effects
  bind(
    name: String
    type: Litereum.Type
    expr: Litereum.Term
    body: Litereum.Term
  )
  // Effect: wraps a pure value
  return(
    expr: Litereum.Term
  )
}

// A binary operation on words
type Litereum.Operation {
  add sub mul div mod or and xor
}

// A type reference
type Litereum.Type {
  word
  data(name: String)
  effe(rety: Litereum.Type)
}

// A global algebraic datatype (ADT) declaration
type Litereum.Data {
  new(
    name: String
    constructors: List<Litereum.Constructor>
  )
}

// An ADT's constructor
type Litereum.Constructor {
  new(
    name: String
    fnam: List<String>
    ftyp: List<Litereum.Type>
  )
}

// A global function
type Litereum.Bond {
  new(
    name: String
    inam: List<String>
    ityp: List<Litereum.Type>
    otyp: Litereum.Type
    main: Litereum.Term
  )
}

// A global state
type Litereum.File {
  new(
    name: String
    ownr: List<String>
    type: Litereum.Type
    expr: Litereum.Term
  )
}

// An evaluation
type Litereum.Eval {
  new(
    term: Litereum.Term
    type: Litereum.Type
  )
}

// A global entry
type Litereum.Entry {
  data(value: Litereum.Data)
  bond(value: Litereum.Bond)
  file(value: Litereum.File)
}

// A Litereum transaction
type Litereum.Transaction {
  new_data(data: Litereum.Data)
  new_bond(bond: Litereum.Bond)
  new_file(file: Litereum.File)
  new_eval(eval: Litereum.Eval)
}

type Litereum.World {
  new(
    entry: Map<Litereum.Entry>
  )
}

type Litereum.Runtime <A: Type> {
  new(
    world: Litereum.World
    subst: Map<Litereum.Term>
    fresh: Nat
    gas: Nat
    term: A
  )
}

Litereum.Runtime.Term: Type
  Litereum.Runtime<Litereum.Term>

Litereum.Runtime.Terms: Type
  Litereum.Runtime<List<Litereum.Term>>

// Utils
// -----

Litereum.genesis: Litereum.World
  Litereum.World.new({})

Litereum.get_data(world: Litereum.World, name: String): Maybe<Litereum.Data>
  open world
  Maybe {
    get entry = world.entry{name}
    case entry {
      data: some(entry.value)
    } default none
  }

Litereum.get_bond(world: Litereum.World, name: String): Maybe<Litereum.Bond>
  open world
  Maybe {
    get entry = world.entry{name}
    case entry {
      bond: some(entry.value)
    } default none
  }

Litereum.get_file(world: Litereum.World, name: String): Maybe<Litereum.File>
  open world
  Maybe {
    get entry = world.entry{name}
    case entry {
      file: some(entry.value)
    } default none
  }

Litereum.get_constructors(world: Litereum.World, name: String): Maybe<List<Litereum.Constructor>>
  case Litereum.get_data(world, name) as got {
    none: none
    some: some(got.value@constructors)
  }

Litereum.get_constructor_index(data: Litereum.Data, name: String): Maybe<Nat>
  Maybe.mapped!(List.ifind!((i,ctr) String.eql(ctr@name,name), data@constructors))!((x) x@fst)

Litereum.get_constructor_value(data: Litereum.Data, name: String): Maybe<Litereum.Constructor>
  Maybe.mapped!(List.ifind!((i,ctr) String.eql(ctr@name,name), data@constructors))!((x) x@snd)

Litereum.extend<A: Type>(
  map: Map<A>
  keys: List<String>
  vals: List<A>
): Map<A>
  case keys vals {
    cons cons: Litereum.extend<A>(map{keys.head} <- vals.head, keys.tail, vals.tail)
  } default map

// Type-Checking
// -------------

Litereum.equal(a: Litereum.Type, b: Litereum.Type): Bool
  case a b {
    word word: true
    data data: String.eql(a.name, b.name)
    effe effe: Litereum.equal(a.rety, b.rety)
  } default false

Litereum.check(
  context: Map<Litereum.Type>
  world: Litereum.World
  term: Litereum.Term
  type: Litereum.Type
): Bool
  open context
  open world
  //log("-- chk " | Litereum.show.term(world,term) | " : " | Litereum.show.type(world,type))
  //log("-- ctx: " | String.join(", ", List.map!!((a) a@fst|":"|Litereum.show.type(world,a@snd), Map.to_list!(context))))  // DEBUG
  //log("")  // DEBUG
  case term {
    var:
      let var_type = context{term.name} abort false
      ////log("-- var " | term.name | " " | Litereum.show.type(var_type) | " " | Litereum.show.type(world,type))  // DEBUG
      Litereum.equal(var_type, type)
    let:
      //log("-- let ")  // DEBUG
      let expr = Litereum.check(context, world, term.expr, term.type)
      let ctx2 = context{term.name} <- term.type
      let body = Litereum.check(ctx2, world, term.body, type)
      expr && body
    call:
      //log("-- call ")  // DEBUG
      //let ownr = Litereum.World.check.owner(context, term.func)
      use bond = Litereum.get_bond(world, term.bond) abort false
      let otyp = Litereum.equal(bond.otyp, type)
      let args = List.zip!!(term.args, bond.ityp)
      let args = List.all!((x) Litereum.check(context, world, x@fst, x@snd), args)
      otyp && args
    create: case type {
      data:
        use data = Litereum.get_data(world, type.name) abort false
        use ctor = Litereum.get_constructor_value(data,term.ctor) abort false
        let size = Nat.eql(List.length!(term.vals), List.length!(ctor.ftyp))
        let vals = List.zip!!(term.vals, ctor.ftyp)
        let vals = List.all!((x) Litereum.check(context, world, x@fst, x@snd), vals)
        size && vals
    } default false
    match: 
      use data = Litereum.get_data(world, term.data) abort false
      let size = Nat.eql(List.length!(term.cses),List.length!(data.constructors))
      let expr = Litereum.check(context, world, Litereum.Term.var(term.name), Litereum.Type.data(term.data))
      let cses = List.zipped_with!!(term.cses, data.constructors)!((case_body, case_ctor)
        let nams = List.map!!(String.concat(term.name|"."), case_ctor@fnam)
        let typs = case_ctor@ftyp
        let ctx2 = Litereum.extend!(context, nams, typs)
        Litereum.check(ctx2, world, case_body, type))
      size && List.and(cses)
    word: case type {
      word: true
    } default false
    compare:
      //log("-- compare ")  // DEBUG
      let val0 = Litereum.check(context, world, term.val0, Litereum.Type.word)
      let val1 = Litereum.check(context, world, term.val0, Litereum.Type.word)
      let iflt = Litereum.check(context, world, term.iflt, type)
      let ifeq = Litereum.check(context, world, term.ifeq, type)
      let ifgt = Litereum.check(context, world, term.ifgt, type)
      val0 && val1 && iflt && ifeq && ifgt
    operate:
      let val0 = Litereum.check(context, world, term.val0, Litereum.Type.word)
      let val1 = Litereum.check(context, world, term.val1, Litereum.Type.word)
      val0 && val1
    set: case type {
      effe: 
        use file = Litereum.get_file(world, term.file) abort false
        let expr = Litereum.check(context, world, term.expr, file.type)
        let body = Litereum.check(context, world, term.body, type)
        expr && body
    } default false
    get: case type {
      effe: 
        use file = Litereum.get_file(world, term.file) abort false
        let ctx2 = Litereum.extend!(context, [term.name], [file.type])
        let body = Litereum.check(ctx2, world, term.body, type)
        body
    } default false
    bind: case type {
      effe:
        let expr = Litereum.check(context, world, term.expr, Litereum.Type.effe(term.type))
        let ctx2 = context{term.name} <- term.type
        let body = Litereum.check(ctx2, world, term.body, type)
        expr && body
    } default false
    return: case type {
      effe: Litereum.check(context, world, term.expr, type.rety)
    } default false
  } default false

// Evaluation
// ----------

// Reduces a pure term to weak normal form
Litereum.reduce(state: Litereum.Runtime.Term): Litereum.Runtime.Term
  let {world, subst, fresh, gas, term} = state
  //log("-- run " | Litereum.show.term(world,term)) // DEBUG
  //log("-- var " | String.join(", ", List.map!!((x) x@fst|":"|Litereum.show.term(world,x@snd), Map.to_list!(subst)))) // DEBUG
  //log("")
  case term {
    var:
      let term = subst{term.name} <> term
      let {world, subst, fresh, gas, term} = Litereum.reduce({world, subst, fresh, gas, term})
      {world, subst{term.name} <- term, fresh, gas, term}
    let:
      Litereum.reduce({world, subst{term.name} <- term.expr, fresh, gas, term.body})
    call:
      use bond = Litereum.get_bond(world, term.bond) abort state
      let {table, fresh, inam} = Litereum.rename.many({}, fresh, bond.inam)
      let {fresh, main} = Litereum.sanitize(world, table, fresh, bond.main)
      let subst = Litereum.extend!(subst, inam, term.args)
      //log("calling " | bond.name | ": " | Litereum.show.term(world,main) | " ... " | String.join(",",bond.inam) | " ... " | String.join(",",inam))
      Litereum.reduce({world, subst, fresh, gas, main})
    match:
      let {world, subst, fresh, gas, expr} = Litereum.reduce({world, subst, fresh, gas, subst{term.name}<>Litereum.Term.word(0)})
      case expr {
        create:
          use data = Litereum.get_data(world,term.data) abort state
          use ctor = Litereum.get_constructor_value(data,expr.ctor) abort state
          let indx = Litereum.get_constructor_index(data,expr.ctor) abort state
          let body = term.cses[indx] abort state
          let nams = List.map!!(String.concat(term.name|"."), ctor@fnam)
          let subst = Litereum.extend!(subst, nams, expr.vals)
          Litereum.reduce({world, subst, fresh, gas, body})
      } default state
    compare:
      let {world, subst, fresh, gas, val0} = Litereum.reduce({world, subst, fresh, gas, term.val0})
      let {world, subst, fresh, gas, val1} = Litereum.reduce({world, subst, fresh, gas, term.val1})
      case val0 val1 {
        word word: case U64.cmp(val0.numb, val1.numb) {
          ltn: Litereum.reduce({world, subst, fresh, gas, term.iflt})
          eql: Litereum.reduce({world, subst, fresh, gas, term.ifeq})
          gtn: Litereum.reduce({world, subst, fresh, gas, term.ifgt})
        }
      } default state
    operate:
      let {world, subst, fresh, gas, val0} = Litereum.reduce({world, subst, fresh, gas, term.val0})
      let {world, subst, fresh, gas, val1} = Litereum.reduce({world, subst, fresh, gas, term.val1})
      case val0 val1 {
        word word: case term.oper {
          add: {world, subst, fresh, gas, Litereum.Term.word(U64.add(val0.numb,val1.numb))}
          sub: {world, subst, fresh, gas, Litereum.Term.word(U64.sub(val0.numb,val1.numb))}
          mul: {world, subst, fresh, gas, Litereum.Term.word(U64.mul(val0.numb,val1.numb))}
          div: {world, subst, fresh, gas, Litereum.Term.word(U64.div(val0.numb,val1.numb))}
          mod: {world, subst, fresh, gas, Litereum.Term.word(U64.mod(val0.numb,val1.numb))}
          or:  {world, subst, fresh, gas, Litereum.Term.word(U64.or( val0.numb,val1.numb))}
          and: {world, subst, fresh, gas, Litereum.Term.word(U64.and(val0.numb,val1.numb))}
          xor: {world, subst, fresh, gas, Litereum.Term.word(U64.xor(val0.numb,val1.numb))}
        }
      } default state
  } default state

// Runs an effect
Litereum.run(state: Litereum.Runtime.Term): Litereum.Runtime.Term
  let {world, subst, fresh, gas, term} = Litereum.reduce(state)
  case term {
    set:
      use file = Litereum.get_file(world, term.file) abort state
      let {world, subst, fresh, gas, expr} = Litereum.normalize({world, subst, fresh, gas, term.expr})
      let new_entry = Litereum.Entry.file(file@expr <- expr)
      let new_world = world@entry <- (world@entry{term.file} <- new_entry)
      //log("-- rebind " | term.name)
      //log("--- from: " | Litereum.show.term(world, bond.main))
      //log("--- to..: " | Litereum.show.term(world, main))
      Litereum.run({new_world, subst, fresh, gas, term.body})
    get:
      use file = Litereum.get_file(world, term.file) abort state
      Litereum.run({world, subst{term.name} <- file.expr, fresh, gas, term.body})
    bind:
      let {world, subst, fresh, gas, expr} = Litereum.run({world, subst, fresh, gas, term.expr})
      case expr {
        return: Litereum.run({world, subst{term.name} <- expr.expr, fresh, gas, term.body})
      } default {world, subst, fresh, gas, Litereum.Term.bind(term.name, term.type, expr, term.body)}
  } default {world, subst, fresh, gas, term}

// Reduces a term to normal form
Litereum.normalize(state: Litereum.Runtime.Term): Litereum.Runtime.Term
  let {world, subst, fresh, gas, term} = Litereum.reduce(state)
  //log("- nrm " | Litereum.show.term(world,term)) // DEBUG
  //log("- var " | String.join(", ", List.map!!((x) x@fst|":"|Litereum.show.term(world,x@snd), Map.to_list!(subst)))) // DEBUG
  //log("")
  case term {
    create:
      let {world, subst, fresh, gas, vals} = Litereum.normalize.many({world, subst, fresh, gas, term.vals})
      {world, subst, fresh, gas, Litereum.Term.create(term.ctor, vals)}
    match:
      use ctrs = Litereum.get_constructors(world, term.data) abort {world, subst, fresh, gas, term}
      let {world, subst, fresh, gas, cses} = Litereum.normalize.cases(ctrs, term.name, {world, subst, fresh, gas, term.cses})
      {world, subst, fresh, gas, Litereum.Term.match(term.name, term.data, cses)}
    compare:
      let {world, subst, fresh, gas, val0} = Litereum.normalize({world, subst, fresh, gas, term.val0})
      let {world, subst, fresh, gas, val1} = Litereum.normalize({world, subst, fresh, gas, term.val1})
      let {world, subst, fresh, gas, iflt} = Litereum.normalize({world, subst, fresh, gas, term.iflt})
      let {world, subst, fresh, gas, ifeq} = Litereum.normalize({world, subst, fresh, gas, term.ifeq})
      let {world, subst, fresh, gas, ifgt} = Litereum.normalize({world, subst, fresh, gas, term.ifgt})
      {world, subst, fresh, gas, Litereum.Term.compare(val0, val1, iflt, ifeq, ifgt)}
    operate:
      let {world, subst, fresh, gas, val0} = Litereum.normalize({world, subst, fresh, gas, term.val0})
      let {world, subst, fresh, gas, val1} = Litereum.normalize({world, subst, fresh, gas, term.val1})
      {world, subst, fresh, gas, Litereum.Term.operate(term.oper, val0, val1)}
    set:
      use file = Litereum.get_file(world, term.file) abort state
      let {world, subst, fresh, gas, expr} = Litereum.normalize({world, subst, fresh, gas, term.expr})
      let {world, subst, fresh, gas, body} = Litereum.normalize({world, subst, fresh, gas, term.body})
      {world, subst, fresh, gas, Litereum.Term.set(term.file, expr, body)}
    get:
      use file = Litereum.get_file(world, term.file) abort state
      let {world, subst, fresh, gas, body} = Litereum.normalize({world, subst{term.name} <- Litereum.Term.var(term.name), fresh, gas, term.body})
      {world, subst, fresh, gas, Litereum.Term.get(term.name, term.file, body)}
    bind:
      let {world, subst, fresh, gas, expr} = Litereum.normalize({world, subst, fresh, gas, term.expr})
      let {world, subst, fresh, gas, body} = Litereum.normalize({world, subst{term.name} <- Litereum.Term.var(term.name), fresh, gas, term.body})
      {world, subst, fresh, gas, Litereum.Term.bind(term.name, term.type, expr, body)}
    return:
      let {world, subst, fresh, gas, expr} = Litereum.normalize({world, subst, fresh, gas, term.expr})
      {world, subst, fresh, gas, Litereum.Term.return(expr)}
  } default {world, subst, fresh, gas, term}

Litereum.normalize.bound(names: List<String>, state: Litereum.Runtime.Term): Litereum.Runtime.Term
  let {world, subst, fresh, gas, term} = state
  let subst = Litereum.extend!(subst, names, List.map!!(Litereum.Term.var,names))
  Litereum.normalize({world, subst, fresh, gas, term})

Litereum.normalize.cases(ctrs: List<Litereum.Constructor>, name: String, state: Litereum.Runtime.Terms): Litereum.Runtime.Terms
  let {world, subst, fresh, gas, cses} = state
  case ctrs cses {
    nil nil:
      state
    cons cons:
      let nams = List.map!!(String.concat(name|"."), ctrs.head@fnam)
      let vals = List.map!!(Litereum.Term.var, nams)
      let subst = Litereum.extend!(subst, nams, vals)
      let {world, subst, fresh, gas, head} = Litereum.normalize({world, subst, fresh, gas, cses.head})
      let {world, subst, fresh, gas, tail} = Litereum.normalize.cases(ctrs.tail, name, {world, subst, fresh, gas, cses.tail})
      {world, subst, fresh, gas, head & tail}
  } default state

Litereum.normalize.many(state: Litereum.Runtime.Terms): Litereum.Runtime.Terms
  let {world, subst, fresh, gas, vals} = state
  case vals {
    nil:
      state
    cons:
      let {world, subst, fresh, gas, head} = Litereum.normalize({world, subst, fresh, gas, vals.head})
      let {world, subst, fresh, gas, tail} = Litereum.normalize.many({world, subst, fresh, gas, vals.tail})
      {world, subst, fresh, gas, head & tail}
  }

// Renames variables to unique names
Litereum.sanitize(
  world: Litereum.World
  table: Map<String>
  fresh: Nat
  term: Litereum.Term
): Pair<Nat, Litereum.Term>
  case term {
    var:
      let term = Litereum.Term.var(table{term.name} <> term.name)
      //log("rename " | term.name | " to " | (table{term.name} <> term.name))
      {fresh, term}
    call:
      let {fresh, args} = Litereum.sanitize.many(world, table, fresh, term.args)
      {fresh, Litereum.Term.call(term.bond, args)}
    let:
      let {fresh, expr} = Litereum.sanitize(world, table, fresh, term.expr)
      let {table, fresh, name} = Litereum.rename(table, fresh, term.name)
      let {fresh, body} = Litereum.sanitize(world, table, fresh, term.body)
      {fresh, Litereum.Term.let(name, term.type, expr, body)}
    create:
      let {fresh, vals} = Litereum.sanitize.many(world, table, fresh, term.vals)
      {fresh, Litereum.Term.create(term.ctor, vals)}
    match:
      let ctrs = Litereum.get_constructors(world, term.data) <> []
      let old_name = term.name
      let new_name = table{term.name} <> term.name
      let {fresh, cses} = Litereum.sanitize.cases(world, table, fresh, old_name, new_name, ctrs, term.cses)
      {fresh, Litereum.Term.match(new_name, term.data, cses)}
    word:
      {fresh, Litereum.Term.word(term.numb)}
    compare:
      let {fresh, val0} = Litereum.sanitize(world, table, fresh, term.val0)
      let {fresh, val1} = Litereum.sanitize(world, table, fresh, term.val1)
      let {fresh, iflt} = Litereum.sanitize(world, table, fresh, term.iflt)
      let {fresh, ifeq} = Litereum.sanitize(world, table, fresh, term.ifeq)
      let {fresh, ifgt} = Litereum.sanitize(world, table, fresh, term.ifgt)
      {fresh, Litereum.Term.compare(val0, val1, iflt, ifeq, ifgt)}
    operate:
      let {fresh, val0} = Litereum.sanitize(world, table, fresh, term.val0)
      let {fresh, val1} = Litereum.sanitize(world, table, fresh, term.val1)
      {fresh, Litereum.Term.operate(term.oper, val0, val1)}
    set:
      use file = Litereum.get_file(world, term.file) abort {fresh, term}
      let {fresh, expr} = Litereum.sanitize(world, table, fresh, term.expr)
      let {fresh, body} = Litereum.sanitize(world, table, fresh, term.body)
      {fresh, Litereum.Term.set(term.file, expr, body)}
    get:
      use file = Litereum.get_file(world, term.file) abort {fresh, term}
      let {table, fresh, name} = Litereum.rename(table, fresh, term.name)
      let {fresh, body} = Litereum.sanitize(world, table, fresh, term.body)
      {fresh, Litereum.Term.get(name, term.file, body)}
    bind:
      let {fresh, expr} = Litereum.sanitize(world, table, fresh, term.expr)
      let {table, fresh, name} = Litereum.rename(table, fresh, term.name)
      let {fresh, body} = Litereum.sanitize(world, table, fresh, term.body)
      {fresh, Litereum.Term.bind(name, term.type, expr, body)}
    return:
      let {fresh, expr} = Litereum.sanitize(world, table, fresh, term.expr)
      {fresh, Litereum.Term.return(expr)}
  }

Litereum.sanitize.cases(
  world: Litereum.World
  table: Map<String>
  fresh: Nat
  old_name: String
  new_name: String
  ctrs: List<Litereum.Constructor>
  cses: List<Litereum.Term>
): Pair<Nat, List<Litereum.Term>>
  case ctrs cses {
    nil nil:
      {fresh, []}
    cons cons:
      let new_table = table
      let new_table = for field in ctrs.head@fnam: new_table{old_name | "." | field} <- new_name | "." | field
      let {fresh, head} = Litereum.sanitize(world, new_table, fresh, cses.head)
      let {fresh, tail} = Litereum.sanitize.cases(world, table, fresh, old_name, new_name, ctrs.tail, cses.tail)
      {fresh, head & tail}
  } default {fresh, []}

Litereum.sanitize.many(
  world: Litereum.World
  table: Map<String>
  fresh: Nat
  terms: List<Litereum.Term>
): Pair<Nat, List<Litereum.Term>>
  case terms {
    nil:
      {fresh, []}
    cons:
      let {fresh, head} = Litereum.sanitize(world, table, fresh, terms.head)
      let {fresh, tail} = Litereum.sanitize.many(world, table, fresh, terms.tail)
      {fresh, head & tail}
  }

// Generates a new name to replace old_name
Litereum.rename(table: Map<String>, fresh: Nat, old_name: String): Triple<Map<String>, Nat, String>
    let new_name = "$" | Nat.show(fresh)
    let table = table{old_name} <- new_name
    let fresh = Nat.succ(fresh)
    {table, fresh, new_name}

Litereum.rename.many(table: Map<String>, fresh: Nat, names: List<String>): Triple<Map<String>, Nat, List<String>>
  case names {
    nil:
      {table, fresh, []}
    cons:
      let {table, fresh, head} = Litereum.rename(table, fresh, names.head)
      let {table, fresh, tail} = Litereum.rename.many(table, fresh, names.tail)
      {table, fresh, head & tail}
  }

// Transaction
// -----------

//Litereum.reg(
  //world: Litereum.World
  //transaction: Litereum.Transaction
//): Litereum.World
  //Litereum.run_transaction(world,transaction,true) <> world

Litereum.transact(
  world: Litereum.World
  transaction: Litereum.Transaction
): Maybe<Pair<Litereum.World,String>>
  open world
  case transaction {
    new_data:
      use data = transaction.data
      case world.entry{data.name} as got_type {
        none:
          let world = world@entry <- (world.entry{data.name} <- Litereum.Entry.data(data))
          some({world, "[data] " | data.name})
      } default none
    new_bond:
      use bond = transaction.bond
      case world.entry{bond.name} as got {
        none:
          let world = world@entry <- (world.entry{bond.name} <- Litereum.Entry.bond(bond))
          let context = Litereum.extend<Litereum.Type>({}, bond.inam, bond.ityp)
          if Litereum.check(context, world, bond.main, bond.otyp) then
            some({world, "[bond] " | bond.name})
          else
            none
      } default
        none
    new_file:
      use file = transaction.file
      case world.entry{file.name} as got {
        none:
          let world = world@entry <- (world.entry{file.name} <- Litereum.Entry.file(file))
          if Litereum.check({}, world, file.expr, file.type) then
            some({world, "[file] " | file.name})
          else
            none
      } default
        none
    new_eval:
      use eval = transaction.eval
      if Litereum.check({}, world, eval.term, eval.type) then
        let fresh = 0
        let {fresh, term} = Litereum.sanitize(world, {}, fresh, eval.term)
        let {world, subst, fresh, gas, term} = case eval.type {
          effe: Litereum.normalize(Litereum.run({world, {}, fresh, 0, term}))
        } default Litereum.normalize({world, {}, fresh, 0, term})
        some({world, "[eval] " | Litereum.show.term(world, term)})
      else
        none
  }

// Serialization
// -------------

Litereum.serialize.varlen(value: Nat): Bits
  Litereum.serialize.varlen.go(Nat.add(value,1))

Litereum.deserialize.varlen(bits: Bits): Pair<Bits,Nat>
  let {bits,value} = Litereum.deserialize.varlen.go(bits)
  {bits, Nat.sub(value,1)}

Litereum.serialize.varlen.go(value: Nat): Bits
  case value {
    zero: Bits.e
    succ:
      if Nat.eql(value,1) then
        Bits.o(Bits.e)
      else if Nat.eql(Nat.mod(value,2),0)
        then Bits.i(Bits.o(Litereum.serialize.varlen.go(Nat.div(value,2))))
        else Bits.i(Bits.i(Litereum.serialize.varlen.go(Nat.div(value,2))))
  }

Litereum.deserialize.varlen.go(bits: Bits): Pair<Bits,Nat>
  case bits {
    e: {Bits.e, 0}
    o: {bits.pred, 1}
    i: case bits.pred {
      e: {bits.pred, 0}
      o:
        let {bits,x} = Litereum.deserialize.varlen.go(bits.pred.pred)
        {bits, Nat.mul(x,2)}
      i:
        let {bits,x} = Litereum.deserialize.varlen.go(bits.pred.pred)
        {bits, Nat.add(Nat.mul(x,2),1)}
    }
  }

Litereum.serialize.fixlen(size: Nat, value: Nat): Bits
  case size {
    zero: Bits.e
    succ: if Nat.eql(Nat.mod(value,2),0)
      then Bits.o(Litereum.serialize.fixlen(size.pred, Nat.div(value,2)))
      else Bits.i(Litereum.serialize.fixlen(size.pred, Nat.div(value,2)))
  }

Litereum.deserialize.fixlen(size: Nat, bits: Bits): Pair<Bits,Nat>
  case size {
    zero: {bits, 0}
    succ: case bits {
      e: {Bits.e, 0}
      o:
        let {bits,x} = Litereum.deserialize.fixlen(size.pred, bits.pred)
        {bits, Nat.mul(x,2)}
      i:
        let {bits,x} = Litereum.deserialize.fixlen(size.pred, bits.pred)
        {bits, Nat.add(Nat.mul(x,2),1)}
    }
  }

Litereum.serialize.list<A: Type>(item: A -> Bits, list: List<A>): Bits
  case list {
    nil: Bits.o(Bits.e)
    cons: Bits.i(Bits.concat(item(list.head), Litereum.serialize.list<A>(item, list.tail)))
  }

Litereum.deserialize.list<A: Type>(item: Bits -> Pair<Bits,A>, bits: Bits): Pair<Bits,List<A>>
  case bits {
    e: {Bits.e, []}
    o: {bits.pred, []}
    i:
      let {bits, head} = item(bits.pred)
      let {bits, tail} = Litereum.deserialize.list<A>(item, bits)
      {bits, head & tail}
  }

Litereum.serialize.name(name: String): Bits
  case name {
    nil:
      Bits.o(Bits.e)
    cons:
      let numb =
        if U16.btw('0', name.head, '9') then
          U16.sub(name.head, '0')
        else if U16.btw('A', name.head, 'Z') then
          U16.add(U16.sub(name.head, 'A'), 10#16)
        else if U16.btw('a', name.head, 'z') then
          U16.add(U16.sub(name.head, 'a'), 36#16)
        else if U16.btw('_', name.head, '_') then
          62#16
        else
          63#16
      let head = Litereum.serialize.fixlen(6, U16.to_nat(numb))
      let tail = Litereum.serialize.name(name.tail)
      Bits.i(Bits.concat(head, tail))
  }

Litereum.deserialize.name(bits: Bits): Pair<Bits,String>
  case bits {
    e: {Bits.e, ""}
    o: {bits.pred, ""}
    i:
      let {bits, numb} = Litereum.deserialize.fixlen(6, bits.pred)
      let {bits, tail} = Litereum.deserialize.name(bits)
      let numb = Nat.to_u16(numb)
      let head =
        if U16.btw( 0, numb,  9) then
          U16.add(numb, '0')
        else if U16.btw(10, numb, 35) then
          U16.add(U16.sub(numb,10#16), 'A')
        else if U16.btw(36, numb, 61) then
          U16.add(U16.sub(numb,36#16), 'a')
        else if U16.btw(62, numb, 62) then
          '_'
        else
          '.'
      {bits, String.cons(head,tail)}
  }

Litereum.serialize.name.local(world: Litereum.World, vars: List<String>, name: String): Bits
  case List.find_index!(vars, String.eql(name)) as got {
    none: Bits.e
    some: Litereum.serialize.varlen(got.value)
  }

Litereum.deserialize.name.local(world: Litereum.World, vars: List<String>, bits: Bits): Pair<Bits,String>
  let {bits,numb} = Litereum.deserialize.varlen(bits)
  {bits, vars[numb] <> ""}

Litereum.serialize.term(world: Litereum.World, vars: List<String>, term: Litereum.Term): Bits
  case term {
    var:
      Bits.o(Litereum.serialize.name.local(world, vars, term.name))
    let:
      let name = Litereum.serialize.name(term.name)
      let type = Litereum.serialize.type(world,term.type) // TODO
      let expr = Litereum.serialize.term(world,vars,term.expr)
      let body = Litereum.serialize.term(world,term.name&vars,term.body)
      Bits.i(Bits.o(Bits.o(Bits.o(Bits.concat(name, Bits.concat(type, Bits.concat(expr, body)))))))
    call:
      let bond = Litereum.serialize.name(term.bond)
      let args = Litereum.serialize.list!(Litereum.serialize.term(world,vars), term.args)
      Bits.i(Bits.i(Bits.o(Bits.o(Bits.concat(bond, args)))))
    create:
      let ctor = Litereum.serialize.name(term.ctor)
      let vals = Litereum.serialize.list!(Litereum.serialize.term(world,vars), term.vals)
      Bits.i(Bits.o(Bits.i(Bits.o(Bits.concat(ctor, vals)))))
    match:
      let name = Litereum.serialize.name.local(world,vars,term.name)
      let data = Litereum.serialize.name(term.data)
      let cses = Litereum.serialize.cases(world,vars,term.name,Litereum.get_constructors(world,term.data)<>[],term.cses)
      Bits.i(Bits.i(Bits.i(Bits.o(Bits.concat(name, Bits.concat(data, cses))))))
    word:
      let numb = Litereum.serialize.fixlen(64, U64.to_nat(term.numb))
      Bits.i(Bits.o(Bits.o(Bits.i(numb))))
    compare:
      let val0 = Litereum.serialize.term(world,vars,term.val0)
      let val1 = Litereum.serialize.term(world,vars,term.val1)
      let iflt = Litereum.serialize.term(world,vars,term.iflt)
      let ifeq = Litereum.serialize.term(world,vars,term.ifeq)
      let ifgt = Litereum.serialize.term(world,vars,term.ifgt)
      Bits.i(Bits.i(Bits.o(Bits.i(Bits.concat(val0, Bits.concat(val1, Bits.concat(iflt, Bits.concat(ifeq, ifgt))))))))
    operate:
      let oper = Litereum.serialize.fixlen(3, case term.oper { add:0, sub:1, mul:2, div:3, mod:4, or:5, and:6, xor:7 })
      let val0 = Litereum.serialize.term(world,vars,term.val0)
      let val1 = Litereum.serialize.term(world,vars,term.val1)
      Bits.i(Bits.o(Bits.i(Bits.i(Bits.concat(oper, Bits.concat(val0, val1))))))
    set:
      let slit = Litereum.serialize.name(term.file)
      let expr = Litereum.serialize.term(world,vars,term.expr)
      let body = Litereum.serialize.term(world,vars,term.body)
      Bits.i(Bits.i(Bits.i(Bits.i(Bits.o(Bits.o(Bits.concat(slit, Bits.concat(expr, body))))))))
    get:
      let slit = Litereum.serialize.name(term.file)
      let name = Litereum.serialize.name(term.name)
      let body = Litereum.serialize.term(world,term.name&vars,term.body)
      Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.o(Bits.concat(slit, Bits.concat(name, body))))))))
    bind:
      let name = Litereum.serialize.name(term.name)
      let type = Litereum.serialize.type(world,term.type) // TODO
      let expr = Litereum.serialize.term(world,vars,term.expr)
      let body = Litereum.serialize.term(world,term.name&vars,term.body)
      Bits.i(Bits.i(Bits.i(Bits.i(Bits.o(Bits.i(Bits.concat(name, Bits.concat(type, Bits.concat(expr, body)))))))))
    return:
      let expr = Litereum.serialize.term(world,vars,term.expr)
      Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(expr))))))
  } default _

Litereum.deserialize.term(world: Litereum.World, vars: List<String>, bits: Bits): Pair<Bits,Litereum.Term>
  case bits {
    o:
      let {bits,name} = Litereum.deserialize.name.local(world, vars, bits.pred)
      {bits, Litereum.Term.var(name)}
    i:
      let {bits,ctor} = Litereum.deserialize.fixlen(3, bits.pred)
      switch Nat.eql(ctor) {
        0:
          let {bits,name} = Litereum.deserialize.name(bits)
          let {bits,type} = Litereum.deserialize.type(world,bits)
          let {bits,expr} = Litereum.deserialize.term(world,vars,bits)
          let {bits,body} = Litereum.deserialize.term(world,name&vars,bits)
          {bits, Litereum.Term.let(name,type,expr,body)}
        1:
          let {bits,bond} = Litereum.deserialize.name(bits)
          let {bits,args} = Litereum.deserialize.list!(Litereum.deserialize.term(world,vars), bits)
          {bits, Litereum.Term.call(bond,args)}
        2:
          let {bits,ctor} = Litereum.deserialize.name(bits)
          let {bits,vals} = Litereum.deserialize.list!(Litereum.deserialize.term(world,vars), bits)
          {bits, Litereum.Term.create(ctor, vals)}
        3:
          let {bits,name} = Litereum.deserialize.name.local(world,vars,bits)
          let {bits,data} = Litereum.deserialize.name(bits)
          let {bits,cses} = Litereum.deserialize.cases(world,vars,name,Litereum.get_constructors(world,data)<>[],bits)
          {bits, Litereum.Term.match(name,data,cses)}
        4:
          let {bits,numb} = Litereum.deserialize.fixlen(64,bits)
          {bits, Litereum.Term.word(Nat.to_u64(numb))}
        5:
          let {bits,val0} = Litereum.deserialize.term(world,vars,bits)
          let {bits,val1} = Litereum.deserialize.term(world,vars,bits)
          let {bits,iflt} = Litereum.deserialize.term(world,vars,bits)
          let {bits,ifeq} = Litereum.deserialize.term(world,vars,bits)
          let {bits,ifgt} = Litereum.deserialize.term(world,vars,bits)
          {bits, Litereum.Term.compare(val0,val1,iflt,ifeq,ifgt)}
        6:
          let {bits,oper} = Litereum.deserialize.fixlen(3, bits)
          let {bits,val0} = Litereum.deserialize.term(world,vars,bits)
          let {bits,val1} = Litereum.deserialize.term(world,vars,bits)
          let oper = switch Nat.eql(oper) {
            0: Litereum.Operation.add
            1: Litereum.Operation.sub
            2: Litereum.Operation.mul
            3: Litereum.Operation.div
            4: Litereum.Operation.mod
            5: Litereum.Operation.or
            6: Litereum.Operation.and
            7: Litereum.Operation.xor
          } default Litereum.Operation.add
          {bits, Litereum.Term.operate(oper, val0, val1)}
        7:
          let {bits,ctor} = Litereum.deserialize.fixlen(2, bits)
          switch Nat.eql(ctor) {
            0:
              let {bits,file} = Litereum.deserialize.name(bits)
              let {bits,expr} = Litereum.deserialize.term(world,vars,bits)
              let {bits,body} = Litereum.deserialize.term(world,vars,bits)
              {bits, Litereum.Term.set(file,expr,body)}
            1:
              let {bits,file} = Litereum.deserialize.name(bits)
              let {bits,name} = Litereum.deserialize.name(bits)
              let {bits,body} = Litereum.deserialize.term(world,name&vars,bits)
              {bits, Litereum.Term.get(name,file,body)}
            2:
              let {bits,name} = Litereum.deserialize.name(bits)
              let {bits,type} = Litereum.deserialize.type(world,bits)
              let {bits,expr} = Litereum.deserialize.term(world,vars,bits)
              let {bits,body} = Litereum.deserialize.term(world,name&vars,bits)
              {bits, Litereum.Term.bind(name,type,expr,body)}
            3:
              let {bits,expr} = Litereum.deserialize.term(world,vars,bits)
              {bits, Litereum.Term.return(expr)}
          } default {bits, Litereum.Term.word(0)}
      } default {bits, Litereum.Term.word(0)}
  } default {bits, Litereum.Term.word(0)}

Litereum.serialize.cases(
  world: Litereum.World
  vars: List<String>
  name: String
  ctors: List<Litereum.Constructor>
  cases: List<Litereum.Term>
): Bits
  case ctors cases {
    nil nil:
      Bits.e
    cons cons:
      let flds = List.map!!(String.concat(name|"."), ctors.head@fnam)
      let head = Litereum.serialize.term(world, List.reverse!(flds) ++ vars, cases.head)
      let tail = Litereum.serialize.cases(world, vars, name, ctors.tail, cases.tail)
      Bits.concat(head, tail)
  } default Bits.e

Litereum.deserialize.cases(
  world: Litereum.World
  vars: List<String>
  name: String
  ctors: List<Litereum.Constructor>
  bits: Bits
): Pair<Bits, List<Litereum.Term>>
  case ctors {
    nil:
      {bits, []}
    cons:
      let flds = List.map!!(String.concat(name|"."), ctors.head@fnam)
      let {bits,head} = Litereum.deserialize.term(world, List.reverse!(flds) ++ vars, bits)
      let {bits,tail} = Litereum.deserialize.cases(world, vars, name, ctors.tail, bits)
      {bits, head & tail}
  }

Litereum.serialize.type(world: Litereum.World, typ: Litereum.Type): Bits
  case typ {
    word: Bits.o(Bits.o(Bits.e))
    data: Bits.i(Bits.o(Litereum.serialize.name(typ.name)))
    effe: Bits.o(Bits.i(Litereum.serialize.type(world,typ.rety)))
  }

Litereum.deserialize.type(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Type>
  let {bits,ctor} = Litereum.deserialize.fixlen(2, bits)
  switch Nat.eql(ctor) {
    0:
      {bits, Litereum.Type.word}
    1:
      let {bits,name} = Litereum.deserialize.name(bits)
      {bits, Litereum.Type.data(name)}
    2:
      let {bits,rety} = Litereum.deserialize.type(world, bits)
      {bits, Litereum.Type.effe(rety)}
  } default {bits, Litereum.Type.word}

Litereum.serialize.data(world: Litereum.World, data: Litereum.Data): Bits
  open data
  let name = Litereum.serialize.name(data.name)
  let ctrs = Litereum.serialize.list!(Litereum.serialize.constructor(world), data.constructors)
  Bits.concat(name, ctrs)

Litereum.deserialize.data(world: Litereum.World, bits: Bits): Pair<Bits, Litereum.Data>
  let {bits,name} = Litereum.deserialize.name(bits)
  let {bits,ctrs} = Litereum.deserialize.list!(Litereum.deserialize.constructor(world), bits)
  {bits, Litereum.Data.new(name,ctrs)}

Litereum.serialize.constructor(world: Litereum.World, ctor: Litereum.Constructor): Bits
  open ctor
  let name = Litereum.serialize.name(ctor.name)
  let nams = Litereum.serialize.list!(Litereum.serialize.name, ctor.fnam)
  let typs = Litereum.serialize.list!(Litereum.serialize.type(world), ctor.ftyp)
  Bits.concat(name, Bits.concat(nams, typs))
  
Litereum.deserialize.constructor(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Constructor>
  let {bits,name} = Litereum.deserialize.name(bits)
  let {bits,nams} = Litereum.deserialize.list!(Litereum.deserialize.name, bits)
  let {bits,typs} = Litereum.deserialize.list!(Litereum.deserialize.type(world), bits)
  {bits, Litereum.Constructor.new(name, nams, typs)}

Litereum.serialize.bond(world: Litereum.World, bond: Litereum.Bond): Bits
  open bond
  let name = Litereum.serialize.name(bond.name)
  let inam = Litereum.serialize.list!(Litereum.serialize.name, bond.inam)
  let ityp = Litereum.serialize.list!(Litereum.serialize.type(world), bond.ityp)
  let otyp = Litereum.serialize.type(world, bond.otyp)
  let main = Litereum.serialize.term(world, List.reverse!(bond.inam), bond.main)
  Bits.concat(name, Bits.concat(inam, Bits.concat(ityp, Bits.concat(otyp, main))))

Litereum.deserialize.bond(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Bond>
  let {bits,name} = Litereum.deserialize.name(bits)
  let {bits,inam} = Litereum.deserialize.list!(Litereum.deserialize.name, bits)
  let {bits,ityp} = Litereum.deserialize.list!(Litereum.deserialize.type(world), bits)
  let {bits,otyp} = Litereum.deserialize.type(world, bits)
  let {bits,main} = Litereum.deserialize.term(world,List.reverse!(inam),bits)
  {bits, Litereum.Bond.new(name, inam, ityp, otyp, main)}

Litereum.serialize.file(world: Litereum.World, file: Litereum.File): Bits
  open file
  let name = Litereum.serialize.name(file.name)
  let ownr = Litereum.serialize.list!(Litereum.serialize.name, file.ownr)
  let type = Litereum.serialize.type(world, file.type)
  let expr = Litereum.serialize.term(world, [], file.expr)
  Bits.concat(name, Bits.concat(ownr, Bits.concat(type, expr)))

Litereum.deserialize.file(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.File>
  let {bits,name} = Litereum.deserialize.name(bits)
  let {bits,ownr} = Litereum.deserialize.list!(Litereum.deserialize.name, bits)
  let {bits,type} = Litereum.deserialize.type(world, bits)
  let {bits,expr} = Litereum.deserialize.term(world, [], bits)
  {bits, Litereum.File.new(name, ownr, type, expr)}

Litereum.serialize.transaction(world: Litereum.World, transaction: Litereum.Transaction): Bits
  case transaction {
    new_data:
      let data = Litereum.serialize.data(world, transaction.data)
      Bits.o(Bits.o(data))
    new_bond:
      let bond = Litereum.serialize.bond(world, transaction.bond)
      Bits.i(Bits.o(bond))
    new_file:
      let file = Litereum.serialize.file(world, transaction.file)
      Bits.o(Bits.i(file))
    new_eval:
      let term = Litereum.serialize.eval(world, transaction.eval)
      Bits.i(Bits.i(term))
  }

Litereum.deserialize.transaction(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Transaction>
  let {bits,ctor} = Litereum.deserialize.fixlen(2, bits)
  switch Nat.eql(ctor) {
    0:
      let {bits,data} = Litereum.deserialize.data(world, bits)
      {bits, Litereum.Transaction.new_data(data)}
    1:
      let {bits,bond} = Litereum.deserialize.bond(world, bits)
      {bits, Litereum.Transaction.new_bond(bond)}
    2:
      let {bits,file} = Litereum.deserialize.file(world, bits)
      {bits, Litereum.Transaction.new_file(file)}
    3:
      let {bits,eval} = Litereum.deserialize.eval(world, bits)
      {bits, Litereum.Transaction.new_eval(eval)}
  } default {bits, Litereum.Transaction.new_data(Litereum.Data.new("",[]))}

Litereum.serialize.eval(world: Litereum.World, eval: Litereum.Eval): Bits
  open eval
  let term = Litereum.serialize.term(world, [], eval.term)
  let type = Litereum.serialize.type(world, eval.type)
  Bits.concat(term, type)

Litereum.deserialize.eval(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Eval>
  let {bits,term} = Litereum.deserialize.term(world, [], bits)
  let {bits,type} = Litereum.deserialize.type(world, bits)
  {bits, Litereum.Eval.new(term,type)}

Litereum.serialize.block(world: Litereum.World, block: List<Litereum.Transaction>): Bits
  case block {
    nil:
      Bits.e
    cons:
      let head = Litereum.serialize.transaction(world, block.head)
      let tail = Litereum.serialize.block(world, block.tail)
      Bits.concat(head, tail)
  }

Litereum.deserialize.block(world: Litereum.World, bits: Bits): Pair<Bits, List<Litereum.Transaction>>
  if Bits.is_empty(bits) then
    {Bits.e, []}
  else
    let {bits,head} = Litereum.deserialize.transaction(world, bits)
    let {bits,tail} = Litereum.deserialize.block(world, bits)
    {bits, head & tail}


// Stringification
// ---------------

Litereum.show.term(
  world: Litereum.World
  term: Litereum.Term
): String
  case term {
    var:
      term.name
    let:
      let name = term.name
      let type = Litereum.show.type(world, term.type)
      let expr = Litereum.show.term(world, term.expr)
      let body = Litereum.show.term(world, term.body)
      "let " | name | " : " | type | " = " | expr | " " | body
    create:
      let vals = List.mapped!(term.vals)!(Litereum.show.term(world))
      term.ctor | "{" | String.join(",",vals) | "}"
    match:
      use data = Litereum.get_data(world, term.data) abort "?"
      let name = term.name
      let cses = List.zipped_with!!(data.constructors, term.cses)!((case_ctor, case_body)
        case_ctor@name | ": " | Litereum.show.term(world, case_body))
      "case " | name | " : " | term.data | " { " | String.join(", ", cses) | " }"
    word:
      "#" | U64.show(term.numb)
    compare:
      let val0 = Litereum.show.term(world, term.val0)
      let val1 = Litereum.show.term(world, term.val1)
      let iflt = Litereum.show.term(world, term.iflt)
      let ifeq = Litereum.show.term(world, term.ifeq)
      let ifgt = Litereum.show.term(world, term.ifgt)
      "compare " | val0 | " " | val1 | " { _<_: " | iflt | " _=_: " | ifeq | " _>_: " | ifgt | " }"
    operate:
      let oper = case term.oper { add: "+", sub: "-", mul: "*", div: "/", mod: "%", or: "|", and: "&", xor: "^" }
      let val0 = Litereum.show.term(world, term.val0)
      let val1 = Litereum.show.term(world, term.val1)
      oper | "(" | val0 | "," | val1 | ")"
    call:
      let bond = term.bond
      let args = List.map!!(Litereum.show.term(world), term.args)
      bond | "(" | String.join(",", args) | ")"
    set:
      let file = term.file
      let expr = Litereum.show.term(world, term.expr)
      let body = Litereum.show.term(world, term.body)
      "set " | file | " = " | expr | "; " | body
    get:
      let file = term.file
      let name = term.name
      let body = Litereum.show.term(world, term.body)
      "get " | name | " = " | file | "; " | body
    bind:
      let name = term.name
      let type = Litereum.show.type(world, term.type)
      let expr = Litereum.show.term(world, term.expr)
      let body = Litereum.show.term(world, term.body)
      if String.is_empty(name) then
        "run " | expr | "; " | body
      else
        "run " | name | " : " | type | " = " | expr | "; " | body
    return:
      let expr = Litereum.show.term(world, term.expr)
      "return " | expr
  }

Litereum.show.type(
  world: Litereum.World
  type: Litereum.Type
): String
  case type {
    word: "#word"
    data: type.name
    effe: "& " | Litereum.show.type(world,type.rety)
  }

Litereum.show.data(
  world: Litereum.World
  data: Litereum.Data
): String
  open data
  "data " | data.name | " { "
  | String.join(", ", List.mapped!(data.constructors)!((Litereum.show.constructor(world))))
  | " }"

Litereum.show.constructor(
  world: Litereum.World
  constructor: Litereum.Constructor
): String
  open constructor
  let names = constructor.fnam
  let types = List.mapped!(constructor.ftyp)!(Litereum.show.type(world))
  let fields = List.zip_with!!!((name,type) name | ": " | type, names, types)
  constructor.name | "{" | String.join(", ", fields) | "}"

Litereum.show.bond(
  world: Litereum.World
  bond: Litereum.Bond
): String
  open bond
  "bond "
  | bond.name
  | "("
  | String.join(",",List.zipped_with!!(bond.inam,bond.ityp)!((name,type) name|": "|Litereum.show.type(world,type)))
  | "): "
  | Litereum.show.type(world,bond.otyp)
  | " { "
  | Litereum.show.term(world,bond.main)
  | " }"

Litereum.show.file(
  world: Litereum.World
  file: Litereum.File
): String
  open file
  "file "
  | String.join(" ", List.map!!((x) x|"@", file.ownr))
  | file.name
  | " : "
  | Litereum.show.type(world,file.type)
  | " = "
  | Litereum.show.term(world,file.expr)

Litereum.show.entry(
  world: Litereum.World
  entry: Litereum.Entry
): String
  case entry {
    data: Litereum.show.data(world, entry.value)
    bond: Litereum.show.bond(world, entry.value)
    file: Litereum.show.file(world, entry.value)
  } | "\n"

Litereum.show.eval(
  world: Litereum.World
  eval: Litereum.Eval
): String
  open eval
  let term = Litereum.show.term(world, eval.term)
  let type = Litereum.show.type(world, eval.type)
  "eval {" | term | "} : " | type

Litereum.show.transaction(
  world: Litereum.World
  transaction: Litereum.Transaction
): String
  case transaction {
    new_data: Litereum.show.data(world, transaction.data)
    new_bond: Litereum.show.bond(world, transaction.bond)
    new_file: Litereum.show.file(world, transaction.file)
    new_eval: Litereum.show.eval(world, transaction.eval)
  }

Litereum.show.block(
  world: Litereum.World
  block: List<Litereum.Transaction>
): String
  case block {
    nil:
      ""
    cons:
      let head = Litereum.show.transaction(world, block.head)
      let tail = Litereum.show.block(world, block.tail)
      "- " | head | "\n" | tail
  }

// Parsing
// -------

Litereum.parse.ignore: Parser(List<Unit>)
 Parser.many!(Parser.choice!([
   Parser.text(" ")
   Parser.text("\t")
   Parser.text("\r")
   Parser.text("\n")
   Parser {
     Parser.text("//")
     let end = Parser.choice!([Parser.text("\n"), Parser.eof])
     Parser.until!(end, Parser.one)
     return unit
   }
 ]))

Litereum.parse.text(text: String): Parser(Unit)
  Parser {
    Litereum.parse.ignore
    Parser.text(text)
  }

Litereum.parse.name: Parser<String>
 Parser {
   Litereum.parse.ignore
   get fst_chr = Litereum.parse.letter
   get chrs = Parser.many<Kind.Letter>(Litereum.parse.letter)
   return String.cons(fst_chr, List.fold!(chrs)!(String.nil, String.cons))
 }

Litereum.parse.letter: Parser<Char>
  Parser.letter((chr)
    if      U16.btw('A', chr, 'Z') then Bool.true
    else if U16.btw('a', chr, 'z') then Bool.true
    else if U16.btw('0', chr, '9') then Bool.true
    else if U16.eql('.', chr)      then Bool.true
    else if U16.eql('_', chr)      then Bool.true
    else if U16.eql('^', chr)      then Bool.true
    else                                Bool.false)

Litereum.parse.term(world: Litereum.World): Parser<Litereum.Term>
 Parser.choice!([
    Litereum.parse.term.let(world)
    Litereum.parse.term.create(world)
    Litereum.parse.term.match(world)
    Litereum.parse.term.word(world)
    Litereum.parse.term.compare(world)
    Litereum.parse.term.operate(world)
    Litereum.parse.term.set(world)
    Litereum.parse.term.get(world)
    Litereum.parse.term.bind(world)
    Litereum.parse.term.return(world)
    Litereum.parse.term.call(world)
    Litereum.parse.term.var(world)
 ])

Litereum.parse.term.let(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("let")
    get name = Litereum.parse.name
    Litereum.parse.text(":")
    get type = Litereum.parse.type(world)
    Litereum.parse.text("=")
    get expr = Litereum.parse.term(world)
    Parser.maybe!(Litereum.parse.text(";"))
    get body = Litereum.parse.term(world)
    return Litereum.Term.let(name, type, expr, body)
 }

Litereum.parse.term.create(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    get ctor = Litereum.parse.name
    get vals = Parser.wrap!(
      Litereum.parse.text("{")
      Litereum.parse.term(world)
      Litereum.parse.text("}"))
    return Litereum.Term.create(ctor, vals)
 }

Litereum.parse.term.match(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("case ")
    get name = Litereum.parse.name
    Litereum.parse.text(":")
    get data_name = Litereum.parse.name
    case Litereum.get_data(world, data_name) as found {
      none: Parser.fail!("Type not found.")
      some: Parser {
        use data = found.value
        Litereum.parse.text("{")
        get cses = Litereum.parse.term.match.cases(world, data.constructors)
        Litereum.parse.text("}")
        return Litereum.Term.match(name, data_name, cses)
      }
    }
  }

Litereum.parse.term.match.cases(
  world: Litereum.World
  constructors: List<Litereum.Constructor>
): Parser<List<Litereum.Term>>
 case constructors {
   nil: Parser {
     return []
   }
   cons: Parser {
     use ctor = constructors.head
     Litereum.parse.text(ctor.name)
     Litereum.parse.text(":")
     get head = Litereum.parse.term(world)
     Parser.maybe!(Litereum.parse.text(","))
     get tail = Litereum.parse.term.match.cases(world, constructors.tail)
     return head & tail
   }
 }

Litereum.parse.term.word(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("#")
    get num = Parser.nat
    if Nat.gte(num,Nat.pow(2,64)) then
      Parser.fail!("Number out of bound")
    else Parser {
      return Litereum.Term.word(Nat.to_u64(num))
    }
  }

Litereum.parse.term.compare(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("compare")
    get val0 = Litereum.parse.term(world)
    get val1 = Litereum.parse.term(world)
    Litereum.parse.text("{")
    Litereum.parse.text("_<_:")
    get iflt = Litereum.parse.term(world)
    Litereum.parse.text("_=_:")
    get ifeq = Litereum.parse.term(world)
    Litereum.parse.text("_>_:")
    get ifgt = Litereum.parse.term(world)
    Litereum.parse.text("}")
    return Litereum.Term.compare(val0, val1, iflt, ifeq, ifgt)
  }

Litereum.parse.term.operate(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    get oper = Litereum.parse.term.operation
    case oper {
      none: Parser.fail!("Not an operation.")
      some: Parser {
        Litereum.parse.text("(")
        get val0 = Litereum.parse.term(world)
        Parser.maybe!(Litereum.parse.text(","))
        get val1 = Litereum.parse.term(world)
        Litereum.parse.text(")")
        return Litereum.Term.operate(oper.value, val0, val1)
      }
    }
  }

Litereum.parse.term.operation: Parser<Maybe<Litereum.Operation>>
  Parser.choice!([
    Parser {
      Litereum.parse.text("+")
      return some(Litereum.Operation.add)
    }
    Parser {
      Litereum.parse.text("-")
      return some(Litereum.Operation.sub)
    }
    Parser {
      Litereum.parse.text("*")
      return some(Litereum.Operation.mul)
    }
    Parser {
      Litereum.parse.text("/")
      return some(Litereum.Operation.div)
    }
    Parser {
      Litereum.parse.text("%")
      return some(Litereum.Operation.mod)
    }
    Parser {
      Litereum.parse.text("|")
      return some(Litereum.Operation.or)
    }
    Parser {
      Litereum.parse.text("&")
      return some(Litereum.Operation.and)
    }
    Parser {
      Litereum.parse.text("^")
      return some(Litereum.Operation.xor)
    }
    Parser {
      return none
    }
  ])

Litereum.parse.term.bind(world: Litereum.World): Parser<Litereum.Term>
  Parser.choice!([
    Parser {
      Litereum.parse.text("run")
      get name = Litereum.parse.name
      Litereum.parse.text(":")
      get type = Litereum.parse.type(world)
      Litereum.parse.text("=")
      get expr = Litereum.parse.term(world)
      Parser.maybe!(Litereum.parse.text(";"))
      get body = Litereum.parse.term(world)
      return Litereum.Term.bind(name, type, expr, body)
    }
    Parser {
      Litereum.parse.text("run")
      get expr = Litereum.parse.term(world)
      Parser.maybe!(Litereum.parse.text(";"))
      get body = Litereum.parse.term(world)
      return Litereum.Term.bind("", Litereum.Type.word, expr, body)
    }
  ])

Litereum.parse.term.set(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("set")
    get bond = Litereum.parse.name
    Litereum.parse.text("=")
    get main = Litereum.parse.term(world)
    Parser.maybe!(Litereum.parse.text(";"))
    get body = Litereum.parse.term(world)
    return Litereum.Term.set(bond, main, body)
  }

Litereum.parse.term.get(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("get")
    get name = Litereum.parse.name
    Litereum.parse.text("=")
    get file = Litereum.parse.name
    Parser.maybe!(Litereum.parse.text(";"))
    get body = Litereum.parse.term(world)
    return Litereum.Term.get(name, file, body)
  }

Litereum.parse.term.return(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("return")
    get expr = Litereum.parse.term(world)
    return Litereum.Term.return(expr)
  }

Litereum.parse.term.call(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    get ctor = Litereum.parse.name
    get args = Parser.wrap!(
      Litereum.parse.text("(")
      Parser {
        Parser.maybe!(Litereum.parse.text(","))
        Litereum.parse.term(world)
      }
      Litereum.parse.text(")"))
    return Litereum.Term.call(ctor, args)
 }

Litereum.parse.term.var(
  world: Litereum.World
): Parser<Litereum.Term>
 Parser {
   get name = Litereum.parse.name
   return Litereum.Term.var(name)
 }

Litereum.parse.type(
  world: Litereum.World
): Parser<Litereum.Type>
  Parser.choice!([
    Parser {
      Litereum.parse.text("&")
      get rety = Litereum.parse.type(world)
      return Litereum.Type.effe(rety)
    }
    Parser {
      Litereum.parse.text("#word")
      return Litereum.Type.word
    }
    Parser {
      get name = Litereum.parse.name
      return Litereum.Type.data(name)
    }
  ])

Litereum.parse.data(world: Litereum.World): Parser<Litereum.Data>
  Parser {
    Litereum.parse.text("type")
    get name = Litereum.parse.name
    get ctors = Parser.wrap!(
      Litereum.parse.text("{")
      Parser {
        Parser.maybe!(Litereum.parse.text(","))
        Litereum.parse.constructor(world)
      }
      Litereum.parse.text("}")
    )
    return Litereum.Data.new(name, ctors)
  }
  
Litereum.parse.constructor(world: Litereum.World): Parser<Litereum.Constructor>
 Parser {
   get name = Litereum.parse.name
   get fields = Parser.wrap!(
      Litereum.parse.text("{")
      Litereum.parse.ann(world)
      Litereum.parse.text("}"))
   let nams = List.mapped!(fields)!((x) x@fst)
   let typs = List.mapped!(fields)!((x) x@snd)
   return Litereum.Constructor.new(name, nams, typs)
 }

Litereum.parse.bond(world: Litereum.World): Parser<Litereum.Bond>
  Parser {
    Litereum.parse.text("bond")
    get name = Litereum.parse.name
    get args = Parser.wrap!(
      Litereum.parse.text("(")
      Litereum.parse.ann(world)
      Litereum.parse.text(")"))
    let iarg = List.mapped!(args)!((x) x@fst)
    let ityp = List.mapped!(args)!((x) x@snd)
    Litereum.parse.text(":")
    get otyp = Litereum.parse.type(world)
    Litereum.parse.text("{")
    get main = Litereum.parse.term(world)
    Litereum.parse.text("}")
    return Litereum.Bond.new(name, iarg, ityp, otyp, main)
  }

Litereum.parse.file(world: Litereum.World): Parser<Litereum.File>
  Parser {
    Litereum.parse.text("file")
    get ownr = Parser.many!(Parser {
      get name = Litereum.parse.name
      Litereum.parse.text("@")
      return name
    })
    get name = Litereum.parse.name
    Litereum.parse.text(":")
    get type = Litereum.parse.type(world)
    Litereum.parse.text("=")
    get expr = Litereum.parse.term(world)
    return Litereum.File.new(name, ownr, type, expr)
  }

Litereum.parse.ann(world: Litereum.World): Parser<Pair<String,Litereum.Type>>
 Parser {
    Parser.maybe!(Litereum.parse.text(","))
    get name = Litereum.parse.name
    Litereum.parse.text(":")
    get type = Litereum.parse.type(world)
    return {name, type}
 }

Litereum.parse.eval(world: Litereum.World): Parser<Litereum.Eval>
  Parser {
    Litereum.parse.text("eval")
    Litereum.parse.text("{")
    get term = Litereum.parse.term(world)
    Litereum.parse.text("}")
    Litereum.parse.text(":")
    get type = Litereum.parse.type(world)
    return Litereum.Eval.new(term, type)
  }

Litereum.parse.transaction(world: Litereum.World): Parser<Litereum.Transaction>
  Parser.choice!([
    Parser {
      get data = Litereum.parse.data(world)
      return Litereum.Transaction.new_data(data)
    }
    Parser {
      get bond = Litereum.parse.bond(world)
      return Litereum.Transaction.new_bond(bond)
    }
    Parser {
      get file = Litereum.parse.file(world)
      return Litereum.Transaction.new_file(file)
    }
    Parser {
      get term = Litereum.parse.eval(world)
      return Litereum.Transaction.new_eval(term)
    }
  ])

Litereum.parse.block(world: Litereum.World): Parser<List<Litereum.Transaction>>
  Parser.until!(Litereum.parse.text("save"), Litereum.parse.transaction(world))

// API
// ---

Litereum.api.run(code: String): IO<Unit>
  Litereum.api.run.go(Litereum.genesis, 0, code)

Litereum.api.run.go(
  world: Litereum.World
  block_number: Nat
  code: String
): IO<Unit>
  let parsed = Litereum.parse.block(world, Parser.State.new(none, "", 0, 0, code))
  case parsed {
    error: IO {
      open parsed.err
      if Nat.ltn(parsed.err.idx, String.length(code)) then IO {
        let err = parsed.err.msg | (case parsed.err.nam { nil: "", cons: " Inside " | parsed.err.nam | ":" })
        let hig = Kind.Code.highlight(code, parsed.err.ini, parsed.err.idx, Nat.succ(parsed.err.idx))
        let str = String.flatten([err, "\n", hig])
        IO.print("Error parsing block #" | Nat.show(block_number))
        IO.print(str)
      } else IO {
        IO.print("Done.")
      }
    }
    value: IO {
      let block = parsed.val
      IO.print("Block #" | Nat.show(block_number))
      let bits_0 = Litereum.serialize.block(world, block)
      let bits_1 = Litereum.serialize.block(world, Litereum.deserialize.block(world, bits_0)@snd)
      IO.print("$ " | Bits.hex.encode(bits_0) | " " | if Bits.eql(bits_0,bits_1) then "ok" else "bad_serialization")
      Litereum.api.run.go.transactions(world, block_number, parsed.pst@str, block)
    }
  }

Litereum.api.run.go.transactions(
  world: Litereum.World
  block_number: Nat
  code: String
  transactions: List<Litereum.Transaction>
): IO<Unit>
  case transactions {
    nil: IO {
      IO.print("")
      Litereum.api.run.go(world, Nat.succ(block_number), code)
    }
    cons: case Litereum.transact(world, transactions.head) as result {
      none: IO {
        IO.print("- [fail]")
        Litereum.api.run.go.transactions(world, block_number, code, transactions.tail)
      }
      some: IO {
        let {world, message} = result.value
        IO.print("- " | message)
        Litereum.api.run.go.transactions(world, block_number, code, transactions.tail)
      }
    }
  }

Litereum: _
  IO {
    let x = Litereum.api.run
    return unit
  }

