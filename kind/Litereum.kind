// Litereum: a minimal decentralized computer
// ==========================================

// Types
// -----

// A Litereum term
type Litereum.Term {
  // A variable
  var(
    name: String
  )
  // Call external function
  call(
    bond: String
    args: List<Litereum.Term>
  )
  // Binds a variable
  let(
    name: String
    type: Litereum.Type
    expr: Litereum.Term
    body: Litereum.Term
  )
  // Creates a value
  create(
    ctor: String
    vals: List<Litereum.Term>
  )
  // Pattern-matches a value
  match(
    name: String
    data: String
    cses: List<Litereum.Term>
  )
  // Creates a new 64-bit word
  word(
    numb: U64
  )
  // Compares two words
  compare(
    val0: Litereum.Term
    val1: Litereum.Term
    iflt: Litereum.Term
    ifeq: Litereum.Term
    ifgt: Litereum.Term
  )
  // Binary operation on words
  operate(
    oper: Litereum.Operation
    val0: Litereum.Term
    val1: Litereum.Term
  )
  // Binds an effectiful operation
  bind(
    name: String
    main: Litereum.Term
    body: Litereum.Term
  )
}

// A binary operation on words
type Litereum.Operation {
  add sub mul div mod or and xor
}

// A type reference
type Litereum.Type {
  word
  data(name: String)
}

// A global algebraic datatype (ADT) declaration
type Litereum.Data {
  new(
    name: String
    constructors: List<Litereum.Constructor>
  )
}

// An ADT's constructor
type Litereum.Constructor {
  new(
    name: String
    field_names: List<String>
    field_types: List<Litereum.Type>
  )
}

// A global smart-contract
type Litereum.Bond {
  new(
    name: String
    owners: List<String>
    input_names: List<String>
    input_types: List<Litereum.Type>
    output_type: Litereum.Type
    main: Litereum.Term
  )
}

// An evaluation
type Litereum.Eval {
  new(
    term: Litereum.Term
    type: Litereum.Type
  )
}

// A Litereum transaction
type Litereum.Transaction {
  new_name(name: String)
  new_data(data: Litereum.Data)
  new_bond(bond: Litereum.Bond)
  new_eval(eval: Litereum.Eval)
}

// A global entry
type Litereum.Entry {
  data(value: Litereum.Data)
  bond(value: Litereum.Bond)
}

type Litereum.World {
  new(
    name_count: Nat
    name_to_index: Map<Nat>
    index_to_name: Map<String>
    entry: Map<Litereum.Entry>
  )
}

type Litereum.Runtime <A: Type> {
  new(
    world: Litereum.World
    subst: Map<Litereum.Term>
    fresh: Nat
    gas: Nat
    term: A
  )
}

Litereum.Runtime.Term: Type
  Litereum.Runtime<Litereum.Term>

Litereum.Runtime.Terms: Type
  Litereum.Runtime<List<Litereum.Term>>

// Utils
// -----

Litereum.genesis: Litereum.World
  Litereum.World.new(0, {}, {}, {})

Litereum.get_data(world: Litereum.World, name: String): Maybe<Litereum.Data>
  open world
  Maybe {
    get entry = world.entry{name}
    case entry {
      data: some(entry.value)
    } default none
  }

Litereum.get_constructors(world: Litereum.World, name: String): Maybe<List<Litereum.Constructor>>
  case Litereum.get_data(world, name) as got {
    none: none
    some: some(got.value@constructors)
  }

Litereum.get_bond(world: Litereum.World, name: String): Maybe<Litereum.Bond>
  open world
  Maybe {
    get entry = world.entry{name}
    case entry {
      bond: some(entry.value)
    } default none
  }

Litereum.get_constructor_index(data: Litereum.Data, name: String): Maybe<Nat>
  Maybe.mapped!(List.ifind!((i,ctr) String.eql(ctr@name,name), data@constructors))!((x) x@fst)

Litereum.get_constructor_value(data: Litereum.Data, name: String): Maybe<Litereum.Constructor>
  Maybe.mapped!(List.ifind!((i,ctr) String.eql(ctr@name,name), data@constructors))!((x) x@snd)

Litereum.extend<A: Type>(
  map: Map<A>
  keys: List<String>
  vals: List<A>
): Map<A>
  case keys vals {
    cons cons: Litereum.extend<A>(map{keys.head} <- vals.head, keys.tail, vals.tail)
  } default map

// Type-Checking
// -------------

Litereum.equal(a: Litereum.Type, b: Litereum.Type): Bool
  case a b {
    word word: true
    data data: String.eql(a.name, b.name)
  } default false

Litereum.check(
  context: Map<Litereum.Type>
  world: Litereum.World
  term: Litereum.Term
  type: Litereum.Type
): Bool
  open context
  open world
  //log("-- chk " | Litereum.show.term(world,term) | " : " | Litereum.show.type(world,type))
  //log("-- ctx: " | String.join(", ", List.map!!((a) a@fst|":"|Litereum.show.type.short(a@snd), Map.to_list!(variables))))  // DEBUG
  //log("")  // DEBUG
  case term {
    var:
      let var_type = context{term.name} abort false
      ////log("-- var " | term.name | " " | Litereum.show.type.short(var_type) | " " | Litereum.show.type.short(type))  // DEBUG
      Litereum.equal(var_type, type)
    let:
      //log("-- let ")  // DEBUG
      let def0 = Maybe.is_some!(world.name_to_index{term.name})
      let expr = Litereum.check(context, world, term.expr, term.type)
      let ctx2 = context{term.name} <- term.type
      let cont = Litereum.check(ctx2, world, term.body, type)
      def0 && expr && cont
    call:
      //log("-- call ")  // DEBUG
      //let ownr = Litereum.World.check.owner(context, term.func)
      let def0 = Maybe.is_some!(world.name_to_index{term.bond})
      use bond = Litereum.get_bond(world, term.bond) abort false
      let otyp = Litereum.equal(bond.output_type, type)
      let args = List.zip!!(term.args, bond.input_types)
      let args = List.all!((x) Litereum.check(context, world, x@fst, x@snd), args)
      def0 && otyp && args
    create: case type {
      data:
        use data = Litereum.get_data(world, type.name) abort false
        use ctor = Litereum.get_constructor_value(data,term.ctor) abort false
        let size = Nat.eql(List.length!(term.vals), List.length!(ctor.field_types))
        let vals = List.zip!!(term.vals, ctor.field_types)
        let vals = List.all!((x) Litereum.check(context, world, x@fst, x@snd), vals)
        size && vals
    } default false
    match: 
      use data = Litereum.get_data(world, term.data) abort false
      let def0 = Maybe.is_some!(world.name_to_index{term.data})
      let type = context{term.name} abort false
      let size = Nat.eql(List.length!(term.cses),List.length!(data.constructors))
      let expr = Litereum.check(context, world, Litereum.Term.var(term.name), Litereum.Type.data(term.data))
      let cses = List.zipped_with!!(term.cses, data.constructors)!((case_body, case_ctor)
        let nams = List.map!!(String.concat(term.name|"."), case_ctor@field_names)
        let typs = case_ctor@field_types
        let ctx2 = Litereum.extend!(context, nams, typs)
        Litereum.check(ctx2, world, case_body, type))
      def0 && size && List.and(cses)
    word: case type {
      word: true
    } default false
    compare:
      //log("-- compare ")  // DEBUG
      let val0 = Litereum.check(context, world, term.val0, Litereum.Type.word)
      let val1 = Litereum.check(context, world, term.val0, Litereum.Type.word)
      let iflt = Litereum.check(context, world, term.iflt, type)
      let ifeq = Litereum.check(context, world, term.ifeq, type)
      let ifgt = Litereum.check(context, world, term.ifgt, type)
      val0 && val1 && iflt && ifeq && ifgt
    operate:
      let val0 = Litereum.check(context, world, term.val0, Litereum.Type.word)
      let val1 = Litereum.check(context, world, term.val1, Litereum.Type.word)
      val0 && val1
    bind:
      use bond = Litereum.get_bond(world, term.name) abort false
      let ctx2 = Litereum.extend!(context, bond.input_names, bond.input_types)
      let main = Litereum.check(ctx2, world, term.main, bond.output_type)
      let body = Litereum.check(context, world, term.body, type)
      main && body
  } default false

// Evaluation
// ----------

Litereum.reduce(state: Litereum.Runtime.Term): Litereum.Runtime.Term
  let {world, subst, fresh, gas, term} = state
  //log("-- run " | Litereum.show.term(world,term)) // DEBUG
  //log("-- var " | String.join(", ", List.map!!((x) x@fst|":"|Litereum.show.term(world,x@snd), Map.to_list!(subst)))) // DEBUG
  //log("")
  case term {
    var:
      {world, subst, fresh, gas, subst{term.name} <> term}
    let:
      Litereum.reduce({world, subst{term.name} <- term.expr, fresh, gas, term.body})
    call:
      use bond = Litereum.get_bond(world, term.bond) abort state
      let {table, fresh, input_names} = Litereum.rename.many({}, fresh, bond.input_names)
      let {fresh, main} = Litereum.sanitize(world, table, fresh, bond.main)
      let subst = Litereum.extend!(subst, input_names, term.args)
      //log("calling " | bond.name | ": " | Litereum.show.term(world,main) | " ... " | String.join(",",bond.input_names) | " ... " | String.join(",",input_names))
      Litereum.reduce({world, subst, fresh, gas, main})
    create:
      state
    match:
      let {world, subst, fresh, gas, expr} = Litereum.reduce({world, subst, fresh, gas, subst{term.name}<>Litereum.Term.word(0)})
      case expr {
        create:
          use data = Litereum.get_data(world,term.data) abort state
          use ctor = Litereum.get_constructor_value(data,expr.ctor) abort state
          let indx = Litereum.get_constructor_index(data,expr.ctor) abort state
          let body = term.cses[indx] abort state
          let nams = List.map!!(String.concat(term.name|"."), ctor@field_names)
          let subst = Litereum.extend!(subst, nams, expr.vals)
          Litereum.reduce({world, subst, fresh, gas, body})
      } default state
    word:
      state
    compare:
      let {world, subst, fresh, gas, val0} = Litereum.reduce({world, subst, fresh, gas, term.val0})
      let {world, subst, fresh, gas, val1} = Litereum.reduce({world, subst, fresh, gas, term.val1})
      case val0 val1 {
        word word: case U64.cmp(val0.numb, val0.numb) {
          ltn: Litereum.reduce({world, subst, fresh, gas, term.iflt})
          eql: Litereum.reduce({world, subst, fresh, gas, term.ifeq})
          gtn: Litereum.reduce({world, subst, fresh, gas, term.ifgt})
        }
      } default state
    operate:
      let {world, subst, fresh, gas, val0} = Litereum.reduce({world, subst, fresh, gas, term.val0})
      let {world, subst, fresh, gas, val1} = Litereum.reduce({world, subst, fresh, gas, term.val1})
      case val0 val1 {
        word word: case term.oper {
          add: {world, subst, fresh, gas, Litereum.Term.word(U64.add(val0.numb,val1.numb))}
          sub: {world, subst, fresh, gas, Litereum.Term.word(U64.sub(val0.numb,val1.numb))}
          mul: {world, subst, fresh, gas, Litereum.Term.word(U64.mul(val0.numb,val1.numb))}
          div: {world, subst, fresh, gas, Litereum.Term.word(U64.div(val0.numb,val1.numb))}
          mod: {world, subst, fresh, gas, Litereum.Term.word(U64.mod(val0.numb,val1.numb))}
          or:  {world, subst, fresh, gas, Litereum.Term.word(U64.or( val0.numb,val1.numb))}
          and: {world, subst, fresh, gas, Litereum.Term.word(U64.and(val0.numb,val1.numb))}
          xor: {world, subst, fresh, gas, Litereum.Term.word(U64.xor(val0.numb,val1.numb))}
        }
      } default state
    bind:
      use bond = Litereum.get_bond(world, term.name) abort state
      let nams = bond.input_names
      let vals = List.map!!(Litereum.Term.var, bond.input_names)
      let {world, subst, fresh, gas, term} = state
      let {world, _    , fresh, gas, main} = Litereum.normalize({world, Litereum.extend!(subst, nams, vals), fresh, gas, term.main})
      //log("-- rebind " | term.name)
      //log("--- from: " | Litereum.show.term(world, bond.main))
      //log("--- to..: " | Litereum.show.term(world, main))
      let new_entry = Litereum.Entry.bond(bond@main <- main)
      let new_world = world@entry <- (world@entry{term.name} <- new_entry)
      Litereum.reduce({new_world, subst, fresh, gas, term.body})
  }

Litereum.normalize(state: Litereum.Runtime.Term): Litereum.Runtime.Term
  let {world, subst, fresh, gas, term} = Litereum.reduce(state)
  //log("- nrm " | Litereum.show.term(world,term)) // DEBUG
  //log("- var " | String.join(", ", List.map!!((x) x@fst|":"|Litereum.show.term(world,x@snd), Map.to_list!(subst)))) // DEBUG
  //log("")
  case term {
    create:
      let {world, subst, fresh, gas, vals} = Litereum.normalize.many({world, subst, fresh, gas, term.vals})
      {world, subst, fresh, gas, Litereum.Term.create(term.ctor, vals)}
    match:
      use ctrs = Litereum.get_constructors(world, term.data) abort {world, subst, fresh, gas, term}
      let {world, subst, fresh, gas, cses} = Litereum.normalize.cases(ctrs, term.name, {world, subst, fresh, gas, term.cses})
      {world, subst, fresh, gas, Litereum.Term.match(term.name, term.data, cses)}
    compare:
      let {world, subst, fresh, gas, val0} = Litereum.normalize({world, subst, fresh, gas, term.val0})
      let {world, subst, fresh, gas, val1} = Litereum.normalize({world, subst, fresh, gas, term.val1})
      let {world, subst, fresh, gas, iflt} = Litereum.normalize({world, subst, fresh, gas, term.iflt})
      let {world, subst, fresh, gas, ifeq} = Litereum.normalize({world, subst, fresh, gas, term.ifeq})
      let {world, subst, fresh, gas, ifgt} = Litereum.normalize({world, subst, fresh, gas, term.ifgt})
      {world, subst, fresh, gas, Litereum.Term.compare(val0, val1, iflt, ifeq, ifgt)}
    operate:
      let {world, subst, fresh, gas, val0} = Litereum.normalize({world, subst, fresh, gas, term.val0})
      let {world, subst, fresh, gas, val1} = Litereum.normalize({world, subst, fresh, gas, term.val1})
      {world, subst, fresh, gas, Litereum.Term.operate(term.oper, val0, val1)}
  } default {world, subst, fresh, gas, term}

Litereum.normalize.cases(ctrs: List<Litereum.Constructor>, name: String, state: Litereum.Runtime.Terms): Litereum.Runtime.Terms
  let {world, subst, fresh, gas, cses} = state
  case ctrs cses {
    nil nil:
      state
    cons cons:
      let nams = List.map!!(String.concat(name|"."), ctrs.head@field_names)
      let vals = List.map!!(Litereum.Term.var, nams)
      let subst = Litereum.extend!(subst, nams, vals)
      let {world, subst, fresh, gas, head} = Litereum.normalize({world, subst, fresh, gas, cses.head})
      let {world, subst, fresh, gas, tail} = Litereum.normalize.cases(ctrs.tail, name, {world, subst, fresh, gas, cses.tail})
      {world, subst, fresh, gas, head & tail}
  } default state

Litereum.normalize.many(state: Litereum.Runtime.Terms): Litereum.Runtime.Terms
  let {world, subst, fresh, gas, vals} = state
  case vals {
    nil:
      state
    cons:
      let {world, subst, fresh, gas, head} = Litereum.normalize({world, subst, fresh, gas, vals.head})
      let {world, subst, fresh, gas, tail} = Litereum.normalize.many({world, subst, fresh, gas, vals.tail})
      {world, subst, fresh, gas, head & tail}
  }

Litereum.sanitize(
  world: Litereum.World
  table: Map<String>
  fresh: Nat
  term: Litereum.Term
): Pair<Nat, Litereum.Term>
  case term {
    var:
      let term = Litereum.Term.var(table{term.name} <> term.name)
      //log("rename " | term.name | " to " | (table{term.name} <> term.name))
      {fresh, term}
    call:
      let {fresh, args} = Litereum.sanitize.many(world, table, fresh, term.args)
      {fresh, Litereum.Term.call(term.bond, args)}
    let:
      let {fresh, expr} = Litereum.sanitize(world, table, fresh, term.expr)
      let {table, fresh, name} = Litereum.rename(table, fresh, term.name)
      let {fresh, body} = Litereum.sanitize(world, table, fresh, term.body)
      {fresh, Litereum.Term.let(name, term.type, expr, body)}
    create:
      let {fresh, vals} = Litereum.sanitize.many(world, table, fresh, term.vals)
      {fresh, Litereum.Term.create(term.ctor, vals)}
    match:
      let ctrs = Litereum.get_constructors(world, term.data) <> []
      let old_name = term.name
      let new_name = table{term.name} <> term.name
      let {fresh, cses} = Litereum.sanitize.cases(world, table, fresh, old_name, new_name, ctrs, term.cses)
      {fresh, Litereum.Term.match(new_name, term.data, cses)}
    word:
      {fresh, Litereum.Term.word(term.numb)}
    compare:
      let {fresh, val0} = Litereum.sanitize(world, table, fresh, term.val0)
      let {fresh, val1} = Litereum.sanitize(world, table, fresh, term.val1)
      let {fresh, iflt} = Litereum.sanitize(world, table, fresh, term.iflt)
      let {fresh, ifeq} = Litereum.sanitize(world, table, fresh, term.ifeq)
      let {fresh, ifgt} = Litereum.sanitize(world, table, fresh, term.ifgt)
      {fresh, Litereum.Term.compare(val0, val1, iflt, ifeq, ifgt)}
    operate:
      let {fresh, val0} = Litereum.sanitize(world, table, fresh, term.val0)
      let {fresh, val1} = Litereum.sanitize(world, table, fresh, term.val1)
      {fresh, Litereum.Term.operate(term.oper, val0, val1)}
    bind:
      let {fresh, main} = Litereum.sanitize(world, table, fresh, term.main)
      let {fresh, body} = Litereum.sanitize(world, table, fresh, term.body)
      {fresh, Litereum.Term.bind(term.name, main, body)}
  }

Litereum.sanitize.cases(
  world: Litereum.World
  table: Map<String>
  fresh: Nat
  old_name: String
  new_name: String
  ctrs: List<Litereum.Constructor>
  cses: List<Litereum.Term>
): Pair<Nat, List<Litereum.Term>>
  case ctrs cses {
    nil nil:
      {fresh, []}
    cons cons:
      let new_table = table
      let new_table = for field in ctrs.head@field_names: new_table{old_name | "." | field} <- new_name | "." | field
      let {fresh, head} = Litereum.sanitize(world, new_table, fresh, cses.head)
      let {fresh, tail} = Litereum.sanitize.cases(world, table, fresh, old_name, new_name, ctrs.tail, cses.tail)
      {fresh, head & tail}
  } default {fresh, []}

Litereum.sanitize.many(
  world: Litereum.World
  table: Map<String>
  fresh: Nat
  terms: List<Litereum.Term>
): Pair<Nat, List<Litereum.Term>>
  case terms {
    nil:
      {fresh, []}
    cons:
      let {fresh, head} = Litereum.sanitize(world, table, fresh, terms.head)
      let {fresh, tail} = Litereum.sanitize.many(world, table, fresh, terms.tail)
      {fresh, head & tail}
  }

Litereum.rename(table: Map<String>, fresh: Nat, old_name: String): Triple<Map<String>, Nat, String>
    let new_name = "$" | Nat.show(fresh)
    let table = table{old_name} <- new_name
    let fresh = Nat.succ(fresh)
    {table, fresh, new_name}

Litereum.rename.many(table: Map<String>, fresh: Nat, names: List<String>): Triple<Map<String>, Nat, List<String>>
  case names {
    nil:
      {table, fresh, []}
    cons:
      let {table, fresh, head} = Litereum.rename(table, fresh, names.head)
      let {table, fresh, tail} = Litereum.rename.many(table, fresh, names.tail)
      {table, fresh, head & tail}
  }

// Transaction
// -----------

Litereum.reg(
  world: Litereum.World
  transaction: Litereum.Transaction
): Litereum.World
  Litereum.run(world,transaction,true) <> world

Litereum.run(
  world: Litereum.World
  transaction: Litereum.Transaction
  bipass: Bool
): Maybe<Litereum.World>
  open world
  case transaction {
    new_name:
      let name = transaction.name
      case world@name_to_index{name} as index {
        none:
          let world = world@name_count <- world.name_count + 1
          let world = world@name_to_index <- (world.name_to_index{name} <- world.name_count)
          let world = world@index_to_name <- (world.index_to_name{Nat.show(world.name_count)} <- name)
          some(world)
        some:
          none
      }
    new_data:
      use data = transaction.data
      case world.entry{data.name} as got_type {
        none:
          let logger = if bipass then unit else log("- data " | data.name) unit
          let world = world@entry <- (world.entry{data.name} <- Litereum.Entry.data(data))
          some(world)
      } default none
    new_bond:
      use bond = transaction.bond
      case world.entry{bond.name} as got {
        none:
          //let world = Litereum.reg(world, bond.name)
          //let world = for input in bond.input_names: Litereum.reg(world, input)
          let world = world@entry <- (world.entry{bond.name} <- Litereum.Entry.bond(bond))
          let context = Litereum.extend<Litereum.Type>({}, bond.input_names, bond.input_types)
          if bipass then
            some(world)
          else if Litereum.check(context, world, bond.main, bond.output_type) then
            let logger = if bipass then unit else log("- bond " | bond.name) unit
            some(world)
          else
            let logger = if bipass then unit else log("- bond error: ill-typed bond " | bond.name) unit
            none
      } default
        let logger = if bipass then unit else log("- bond error: redefinition of " | bond.name) unit
        none
    new_eval:
      use eval = transaction.eval
      if bipass then
        some(world)
      else if Litereum.check({}, world, eval.term, eval.type) then
        let {world, subst, fresh, gas, term} = Litereum.normalize({world, {}, 0, 0, eval.term})
        let logger = if bipass then unit else log("- eval " | Litereum.show.term(world,term)) unit
        some(world)
      else
        let logger = if bipass then unit else log("- eval error: ill-typed term") unit
        none
  }

Litereum.run.block(
  world: Litereum.World
  transactions: List<Litereum.Transaction>
): Maybe<Litereum.World>
  case transactions {
    nil: some(world)
    cons: case Litereum.run(world, transactions.head, false) as result {
      none: none
      some: Litereum.run.block(result.value, transactions.tail)
    }
  }

// Serialization
// -------------

Litereum.serialize.varlen(value: Nat): Bits
  Litereum.serialize.varlen.go(Nat.add(value,1))

Litereum.deserialize.varlen(bits: Bits): Pair<Bits,Nat>
  let {bits,value} = Litereum.deserialize.varlen.go(bits)
  {bits, Nat.sub(value,1)}

Litereum.serialize.varlen.go(value: Nat): Bits
  case value {
    zero: Bits.e
    succ:
      if Nat.eql(value,1) then
        Bits.o(Bits.e)
      else if Nat.eql(Nat.mod(value,2),0)
        then Bits.i(Bits.o(Litereum.serialize.varlen.go(Nat.div(value,2))))
        else Bits.i(Bits.i(Litereum.serialize.varlen.go(Nat.div(value,2))))
  }

Litereum.deserialize.varlen.go(bits: Bits): Pair<Bits,Nat>
  case bits {
    e: {Bits.e, 0}
    o: {bits.pred, 1}
    i: case bits.pred {
      e: {bits.pred, 0}
      o:
        let {bits,x} = Litereum.deserialize.varlen.go(bits.pred.pred)
        {bits, Nat.mul(x,2)}
      i:
        let {bits,x} = Litereum.deserialize.varlen.go(bits.pred.pred)
        {bits, Nat.add(Nat.mul(x,2),1)}
    }
  }

Litereum.serialize.fixlen(size: Nat, value: Nat): Bits
  case size {
    zero: Bits.e
    succ: if Nat.eql(Nat.mod(value,2),0)
      then Bits.o(Litereum.serialize.fixlen(size.pred, Nat.div(value,2)))
      else Bits.i(Litereum.serialize.fixlen(size.pred, Nat.div(value,2)))
  }

Litereum.deserialize.fixlen(size: Nat, bits: Bits): Pair<Bits,Nat>
  case size {
    zero: {bits, 0}
    succ: case bits {
      e: {Bits.e, 0}
      o:
        let {bits,x} = Litereum.deserialize.fixlen(size.pred, bits.pred)
        {bits, Nat.mul(x,2)}
      i:
        let {bits,x} = Litereum.deserialize.fixlen(size.pred, bits.pred)
        {bits, Nat.add(Nat.mul(x,2),1)}
    }
  }

Litereum.serialize.list<A: Type>(item: A -> Bits, list: List<A>): Bits
  case list {
    nil: Bits.o(Bits.e)
    cons: Bits.i(Bits.concat(item(list.head), Litereum.serialize.list<A>(item, list.tail)))
  }

Litereum.deserialize.list<A: Type>(item: Bits -> Pair<Bits,A>, bits: Bits): Pair<Bits,List<A>>
  case bits {
    e: {Bits.e, []}
    o: {bits.pred, []}
    i:
      let {bits, head} = item(bits.pred)
      let {bits, tail} = Litereum.deserialize.list<A>(item, bits)
      {bits, head & tail}
  }

Litereum.serialize.name.new(name: String): Bits
  case name {
    nil:
      Bits.o(Bits.e)
    cons:
      let numb =
        if U16.btw('0', name.head, '9') then
          U16.sub(name.head, '0')
        else if U16.btw('A', name.head, 'Z') then
          U16.add(U16.sub(name.head, 'A'), 10#16)
        else if U16.btw('a', name.head, 'z') then
          U16.add(U16.sub(name.head, 'a'), 36#16)
        else if U16.btw('_', name.head, '_') then
          62#16
        else
          63#16
      let head = Litereum.serialize.fixlen(6, U16.to_nat(numb))
      let tail = Litereum.serialize.name.new(name.tail)
      Bits.i(Bits.concat(head, tail))
  }

Litereum.deserialize.name.new(bits: Bits): Pair<Bits,String>
  case bits {
    e: {Bits.e, ""}
    o: {bits.pred, ""}
    i:
      let {bits, numb} = Litereum.deserialize.fixlen(6, bits.pred)
      let {bits, tail} = Litereum.deserialize.name.new(bits)
      let numb = Nat.to_u16(numb)
      let head =
        if U16.btw( 0, numb,  9) then
          U16.add(numb, '0')
        else if U16.btw(10, numb, 35) then
          U16.add(U16.sub(numb,10#16), 'A')
        else if U16.btw(36, numb, 61) then
          U16.add(U16.sub(numb,36#16), 'a')
        else if U16.btw(62, numb, 62) then
          '_'
        else
          '.'
      {bits, String.cons(head,tail)}
  }

Litereum.serialize.name.old(world: Litereum.World, name: String): Bits
  open world
  let value = world.name_to_index{name} abort Bits.e
  let bits = Litereum.serialize.varlen(value)
  bits

Litereum.deserialize.name.old(world: Litereum.World, bits: Bits): Pair<Bits,String>
  open world
  let {bits, value} = Litereum.deserialize.varlen(bits)
  let text = world.index_to_name{Nat.show(value)} abort {bits, ""}
  {bits, text}

Litereum.serialize.name.local(world: Litereum.World, vars: List<String>, name: String): Bits
  case List.find_index!(vars, String.eql(name)) as got {
    none: Bits.e
    some: Litereum.serialize.varlen(got.value)
  }

Litereum.deserialize.name.local(world: Litereum.World, vars: List<String>, bits: Bits): Pair<Bits,String>
  let {bits,numb} = Litereum.deserialize.varlen(bits)
  {bits, vars[numb] <> ""}

Litereum.serialize.term(world: Litereum.World, vars: List<String>, term: Litereum.Term): Bits
  case term {
    var:
      Bits.o(Litereum.serialize.name.local(world, vars, term.name))
    let:
      let name = Litereum.serialize.name.old(world,term.name)
      let type = Litereum.serialize.type(world,term.type) // TODO
      let expr = Litereum.serialize.term(world,vars,term.expr)
      let body = Litereum.serialize.term(world,term.name&vars,term.body)
      Bits.i(Bits.o(Bits.o(Bits.o(Bits.concat(name, Bits.concat(type, Bits.concat(expr, body)))))))
    call:
      let bond = Litereum.serialize.name.old(world,term.bond)
      let args = Litereum.serialize.list!(Litereum.serialize.term(world,vars), term.args)
      Bits.i(Bits.i(Bits.o(Bits.o(Bits.concat(bond, args)))))
    create:
      let ctor = Litereum.serialize.name.old(world,term.ctor)
      let vals = Litereum.serialize.list!(Litereum.serialize.term(world,vars), term.vals)
      Bits.i(Bits.o(Bits.i(Bits.o(Bits.concat(ctor, vals)))))
    match:
      let name = Litereum.serialize.name.local(world,vars,term.name)
      let data = Litereum.serialize.name.old(world,term.data)
      let cses = Litereum.serialize.cases(world,vars,term.name,Litereum.get_constructors(world,term.data)<>[],term.cses)
      Bits.i(Bits.i(Bits.i(Bits.o(Bits.concat(name, Bits.concat(data, cses))))))
    word:
      let numb = Litereum.serialize.fixlen(64, U64.to_nat(term.numb))
      Bits.i(Bits.o(Bits.o(Bits.i(numb))))
    compare:
      let val0 = Litereum.serialize.term(world,vars,term.val0)
      let val1 = Litereum.serialize.term(world,vars,term.val1)
      let iflt = Litereum.serialize.term(world,vars,term.iflt)
      let ifeq = Litereum.serialize.term(world,vars,term.ifeq)
      let ifgt = Litereum.serialize.term(world,vars,term.ifgt)
      Bits.i(Bits.i(Bits.o(Bits.i(Bits.concat(val0, Bits.concat(val1, Bits.concat(iflt, Bits.concat(ifeq, ifgt))))))))
    operate:
      let oper = Litereum.serialize.fixlen(3, case term.oper { add:0, sub:1, mul:2, div:3, mod:4, or:5, and:6, xor:7 })
      let val0 = Litereum.serialize.term(world,vars,term.val0)
      let val1 = Litereum.serialize.term(world,vars,term.val1)
      Bits.i(Bits.o(Bits.i(Bits.i(Bits.concat(oper, Bits.concat(val0, val1))))))
    bind:
      use bond = Litereum.get_bond(world,term.name) abort Bits.e
      let name = Litereum.serialize.name.old(world,term.name)
      let vrs2 = List.reverse!(bond.input_names) ++ vars
      let main = Litereum.serialize.term(world,vrs2,term.main)
      let body = Litereum.serialize.term(world,vars,term.body)
      Bits.i(Bits.i(Bits.i(Bits.i(Bits.concat(name, Bits.concat(main, body))))))
  } default _

Litereum.deserialize.term(world: Litereum.World, vars: List<String>, bits: Bits): Pair<Bits,Litereum.Term>
  case bits {
    o:
      let {bits,name} = Litereum.deserialize.name.local(world, vars, bits.pred)
      {bits, Litereum.Term.var(name)}
    i:
      let {bits,ctor} = Litereum.deserialize.fixlen(3, bits.pred)
      switch Nat.eql(ctor) {
        0:
          let {bits,name} = Litereum.deserialize.name.old(world,bits)
          let {bits,type} = Litereum.deserialize.type(world,bits)
          let {bits,expr} = Litereum.deserialize.term(world,vars,bits)
          let {bits,body} = Litereum.deserialize.term(world,name&vars,bits)
          {bits, Litereum.Term.let(name,type,expr,body)}
        1:
          let {bits,bond} = Litereum.deserialize.name.old(world,bits)
          let {bits,args} = Litereum.deserialize.list!(Litereum.deserialize.term(world,vars), bits)
          {bits, Litereum.Term.call(bond,args)}
        2:
          let {bits,ctor} = Litereum.deserialize.name.old(world,bits)
          let {bits,vals} = Litereum.deserialize.list!(Litereum.deserialize.term(world,vars), bits)
          {bits, Litereum.Term.create(ctor, vals)}
        3:
          let {bits,name} = Litereum.deserialize.name.local(world,vars,bits)
          let {bits,data} = Litereum.deserialize.name.old(world,bits)
          let {bits,cses} = Litereum.deserialize.cases(world,vars,name,Litereum.get_constructors(world,data)<>[],bits)
          {bits, Litereum.Term.match(name,data,cses)}
        4:
          let {bits,numb} = Litereum.deserialize.fixlen(64,bits)
          {bits, Litereum.Term.word(Nat.to_u64(numb))}
        5:
          let {bits,val0} = Litereum.deserialize.term(world,vars,bits)
          let {bits,val1} = Litereum.deserialize.term(world,vars,bits)
          let {bits,iflt} = Litereum.deserialize.term(world,vars,bits)
          let {bits,ifeq} = Litereum.deserialize.term(world,vars,bits)
          let {bits,ifgt} = Litereum.deserialize.term(world,vars,bits)
          {bits, Litereum.Term.compare(val0,val1,iflt,ifeq,ifgt)}
        6:
          let {bits,oper} = Litereum.deserialize.fixlen(3, bits)
          let {bits,val0} = Litereum.deserialize.term(world,vars,bits)
          let {bits,val1} = Litereum.deserialize.term(world,vars,bits)
          let oper = switch Nat.eql(oper) {
            0: Litereum.Operation.add
            1: Litereum.Operation.sub
            2: Litereum.Operation.mul
            3: Litereum.Operation.div
            4: Litereum.Operation.mod
            5: Litereum.Operation.or
            6: Litereum.Operation.and
            7: Litereum.Operation.xor
          } default Litereum.Operation.add
          {bits, Litereum.Term.operate(oper, val0, val1)}
        7:
          let {bits,name} = Litereum.deserialize.name.old(world,bits)
          use bond        = Litereum.get_bond(world,name) abort {bits, Litereum.Term.word(0)}
          let vrs2        = List.reverse!(bond.input_names) ++ vars
          let {bits,main} = Litereum.deserialize.term(world,vrs2,bits)
          let {bits,body} = Litereum.deserialize.term(world,vars,bits)
          {bits, Litereum.Term.bind(name,main,body)}
      } default {bits, Litereum.Term.word(0)}
  } default {bits, Litereum.Term.word(0)}

Litereum.serialize.cases(
  world: Litereum.World
  vars: List<String>
  name: String
  ctors: List<Litereum.Constructor>
  cases: List<Litereum.Term>
): Bits
  case ctors cases {
    nil nil:
      Bits.e
    cons cons:
      let flds = List.map!!(String.concat(name|"."), ctors.head@field_names)
      let head = Litereum.serialize.term(world, List.reverse!(flds) ++ vars, cases.head)
      let tail = Litereum.serialize.cases(world, vars, name, ctors.tail, cases.tail)
      Bits.concat(head, tail)
  } default Bits.e

Litereum.deserialize.cases(
  world: Litereum.World
  vars: List<String>
  name: String
  ctors: List<Litereum.Constructor>
  bits: Bits
): Pair<Bits, List<Litereum.Term>>
  case ctors {
    nil:
      {bits, []}
    cons:
      let flds = List.map!!(String.concat(name|"."), ctors.head@field_names)
      let {bits,head} = Litereum.deserialize.term(world, List.reverse!(flds) ++ vars, bits)
      let {bits,tail} = Litereum.deserialize.cases(world, vars, name, ctors.tail, bits)
      {bits, head & tail}
  }

Litereum.serialize.type(world: Litereum.World, typ: Litereum.Type): Bits
  case typ {
    word: Bits.o(Bits.e)
    data: Bits.i(Litereum.serialize.name.old(world,typ.name))
  }

Litereum.deserialize.type(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Type>
  case bits {
    o:
      {bits.pred, Litereum.Type.word}
    i:
      let {bits,name} = Litereum.deserialize.name.old(world, bits.pred)
      {bits, Litereum.Type.data(name)}
  } default {bits, Litereum.Type.word}

Litereum.serialize.data(world: Litereum.World, data: Litereum.Data): Bits
  open data
  let name = Litereum.serialize.name.old(world, data.name)
  let ctrs = Litereum.serialize.list!(Litereum.serialize.constructor(world), data.constructors)
  Bits.concat(name, ctrs)

Litereum.deserialize.data(world: Litereum.World, bits: Bits): Pair<Bits, Litereum.Data>
  let {bits,name} = Litereum.deserialize.name.old(world, bits)
  let {bits,ctrs} = Litereum.deserialize.list!(Litereum.deserialize.constructor(world), bits)
  {bits, Litereum.Data.new(name,ctrs)}

Litereum.serialize.constructor(world: Litereum.World, ctor: Litereum.Constructor): Bits
  open ctor
  let name = Litereum.serialize.name.old(world,ctor.name)
  let nams = Litereum.serialize.list!(Litereum.serialize.name.old(world), ctor.field_names)
  let typs = Litereum.serialize.list!(Litereum.serialize.type(world), ctor.field_types)
  Bits.concat(name, Bits.concat(nams, typs))
  
Litereum.deserialize.constructor(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Constructor>
  let {bits,name} = Litereum.deserialize.name.old(world,bits)
  let {bits,nams} = Litereum.deserialize.list!(Litereum.deserialize.name.old(world), bits)
  let {bits,typs} = Litereum.deserialize.list!(Litereum.deserialize.type(world), bits)
  {bits, Litereum.Constructor.new(name, nams, typs)}

Litereum.serialize.bond(world: Litereum.World, bond: Litereum.Bond): Bits
  open bond
  let name = Litereum.serialize.name.old(world, bond.name)
  let owners = Litereum.serialize.list!(Litereum.serialize.name.old(world), bond.owners)
  let input_names = Litereum.serialize.list!(Litereum.serialize.name.old(world), bond.input_names)
  let input_types = Litereum.serialize.list!(Litereum.serialize.type(world), bond.input_types)
  let output_type = Litereum.serialize.type(world, bond.output_type)
  let main = Litereum.serialize.term(world, List.reverse!(bond.input_names), bond.main)
  Bits.concat(name, Bits.concat(owners, Bits.concat(input_names, Bits.concat(input_types, Bits.concat(output_type, main)))))

Litereum.deserialize.bond(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Bond>
  let {bits,name} = Litereum.deserialize.name.old(world,bits)
  let {bits,owners} = Litereum.deserialize.list!(Litereum.deserialize.name.old(world), bits)
  let {bits,input_names} = Litereum.deserialize.list!(Litereum.deserialize.name.old(world), bits)
  let {bits,input_types} = Litereum.deserialize.list!(Litereum.deserialize.type(world), bits)
  let {bits,output_type} = Litereum.deserialize.type(world, bits)
  let {bits,main} = Litereum.deserialize.term(world,List.reverse!(input_names),bits)
  {bits, Litereum.Bond.new(name, owners, input_names, input_types, output_type, main)}

Litereum.serialize.transaction(world: Litereum.World, transaction: Litereum.Transaction): Bits
  case transaction {
    new_name:
      let name = Litereum.serialize.name.new(transaction.name)
      Bits.o(Bits.o(name))
    new_data:
      let data = Litereum.serialize.data(world, transaction.data)
      Bits.i(Bits.o(data))
    new_bond:
      let bond = Litereum.serialize.bond(world, transaction.bond)
      Bits.o(Bits.i(bond))
    new_eval:
      let term = Litereum.serialize.eval(world, transaction.eval)
      Bits.i(Bits.i(term))
  }

Litereum.deserialize.transaction(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Transaction>
  let {bits,ctor} = Litereum.deserialize.fixlen(2, bits)
  switch Nat.eql(ctor) {
    0:
      let {bits,name} = Litereum.deserialize.name.new(bits)
      {bits, Litereum.Transaction.new_name(name)}
    1:
      let {bits,data} = Litereum.deserialize.data(world, bits)
      {bits, Litereum.Transaction.new_data(data)}
    2:
      let {bits,bond} = Litereum.deserialize.bond(world, bits)
      {bits, Litereum.Transaction.new_bond(bond)}
    3:
      let {bits,eval} = Litereum.deserialize.eval(world, bits)
      {bits, Litereum.Transaction.new_eval(eval)}
  } default {bits, Litereum.Transaction.new_name("")}

Litereum.serialize.eval(world: Litereum.World, eval: Litereum.Eval): Bits
  open eval
  let term = Litereum.serialize.term(world, [], eval.term)
  let type = Litereum.serialize.type(world, eval.type)
  Bits.concat(term, type)

Litereum.deserialize.eval(world: Litereum.World, bits: Bits): Pair<Bits,Litereum.Eval>
  let {bits,term} = Litereum.deserialize.term(world, [], bits)
  let {bits,type} = Litereum.deserialize.type(world, bits)
  {bits, Litereum.Eval.new(term,type)}

Litereum.serialize.block(world: Litereum.World, block: List<Litereum.Transaction>): Bits
  case block {
    nil:
      Bits.e
    cons:
      let head = Litereum.serialize.transaction(world, block.head)
      let tail = Litereum.serialize.block(Litereum.reg(world,block.head), block.tail)
      Bits.concat(head, tail)
  }

Litereum.deserialize.block(world: Litereum.World, bits: Bits): Pair<Bits, List<Litereum.Transaction>>
  if Bits.is_empty(bits) then
    {Bits.e, []}
  else
    let {bits,head} = Litereum.deserialize.transaction(world, bits)
    let {bits,tail} = Litereum.deserialize.block(Litereum.reg(world,head), bits)
    {bits, head & tail}

// Stringification
// ---------------

Litereum.show.term(
  world: Litereum.World
  term: Litereum.Term
): String
  case term {
    var:
      term.name
    let:
      let name = term.name
      let type = Litereum.show.type(world, term.type)
      let expr = Litereum.show.term(world, term.expr)
      let body = Litereum.show.term(world, term.body)
      "let " | name | " : " | type | " = " | expr | " " | body
    create:
      let vals = List.mapped!(term.vals)!(Litereum.show.term(world))
      term.ctor | "{" | String.join(",",vals) | "}"
    match:
      use data = Litereum.get_data(world, term.data) abort "?"
      let name = term.name
      let cses = List.zipped_with!!(data.constructors, term.cses)!((case_ctor, case_body)
        case_ctor@name | ": " | Litereum.show.term(world, case_body))
      "case " | name | " : " | term.data | " { " | String.join(", ", cses) | " }"
    word:
      "#" | U64.show(term.numb)
    compare:
      let val0 = Litereum.show.term(world, term.val0)
      let val1 = Litereum.show.term(world, term.val1)
      let iflt = Litereum.show.term(world, term.iflt)
      let ifeq = Litereum.show.term(world, term.ifeq)
      let ifgt = Litereum.show.term(world, term.ifgt)
      "compare " | val0 | " " | val1 | " { _<_: " | iflt | " _=_: " | ifeq | " _>_: " | ifgt | " }"
    operate:
      let oper = case term.oper { add: "+", sub: "-", mul: "*", div: "/", mod: "%", or: "|", and: "&", xor: "^" }
      let val0 = Litereum.show.term(world, term.val0)
      let val1 = Litereum.show.term(world, term.val1)
      oper | "(" | val0 | "," | val1 | ")"
    call:
      let bond = term.bond
      let args = List.map!!(Litereum.show.term(world), term.args)
      bond | "(" | String.join(",", args) | ")"
    bind:
      let name = term.name
      let main = Litereum.show.term(world, term.main)
      let body = Litereum.show.term(world, term.body)
      "bind " | name | " { " | main | " } " | body
  }

Litereum.show.type(
  world: Litereum.World
  type: Litereum.Type
): String
  case type {
    word: "#word"
    data: type.name
  }

Litereum.show.data(
  world: Litereum.World
  data: Litereum.Data
): String
  open data
  data.name | " { "
  | String.join(", ", List.mapped!(data.constructors)!((Litereum.show.constructor(world))))
  | " }"

Litereum.show.constructor(
  world: Litereum.World
  constructor: Litereum.Constructor
): String
  open constructor
  let names = constructor.field_names
  let types = List.mapped!(constructor.field_types)!(Litereum.show.type(world))
  let fields = List.zip_with!!!((name,type) name | ": " | type, names, types)
  constructor.name | "{" | String.join(", ", fields) | "}"

Litereum.show.bond(
  world: Litereum.World
  bond: Litereum.Bond
): String
  open bond
  case bond.owners {
    nil: ""
    cons: String.join(",",bond.owners)  | " owns "
  }
  | bond.name
  | "("
  | String.join(",",List.zipped_with!!(bond.input_names,bond.input_types)!((name,type) name|": "|Litereum.show.type(world,type)))
  | "): "
  | Litereum.show.type(world,bond.output_type)
  | " { "
  | Litereum.show.term(world,bond.main)
  | " }"

Litereum.show.entry(
  world: Litereum.World
  entry: Litereum.Entry
): String
  case entry {
    data: Litereum.show.data(world, entry.value)
    bond: Litereum.show.bond(world, entry.value)
  } | "\n"

Litereum.show.eval(
  world: Litereum.World
  eval: Litereum.Eval
): String
  open eval
  let term = Litereum.show.term(world, eval.term)
  let type = Litereum.show.type(world, eval.type)
  "{" | term | "} : " | type

Litereum.show.transaction(
  world: Litereum.World
  transaction: Litereum.Transaction
): String
  case transaction {
    new_name: "name " | transaction.name
    new_data: "type " | Litereum.show.data(world, transaction.data)
    new_bond: "bond " | Litereum.show.bond(world, transaction.bond)
    new_eval: "eval " | Litereum.show.eval(world, transaction.eval)
  }

Litereum.show.block(
  world: Litereum.World
  block: List<Litereum.Transaction>
): String
  case block {
    nil:
      ""
    cons:
      let head = Litereum.show.transaction(world, block.head)
      let tail = Litereum.show.block(Litereum.reg(world,block.head), block.tail)
      "- " | head | "\n" | tail
    }

// Parsing
// -------

Litereum.parse.ignore: Parser(List<Unit>)
 Parser.many!(Parser.choice!([
   Parser.text(" ")
   Parser.text("\t")
   Parser.text("\r")
   Parser.text("\n")
   Parser {
     Parser.text("//")
     let end = Parser.choice!([Parser.text("\n"), Parser.eof])
     Parser.until!(end, Parser.one)
     return unit
   }
 ]))

Litereum.parse.text(text: String): Parser(Unit)
  Parser {
    Litereum.parse.ignore
    Parser.text(text)
  }

Litereum.parse.name: Parser<String>
 Parser {
   Litereum.parse.ignore
   get fst_chr = Litereum.parse.letter
   get chrs = Parser.many<Kind.Letter>(Litereum.parse.letter)
   return String.cons(fst_chr, List.fold!(chrs)!(String.nil, String.cons))
 }

Litereum.parse.letter: Parser<Char>
  Parser.letter((chr)
    if      U16.btw('A', chr, 'Z') then Bool.true
    else if U16.btw('a', chr, 'z') then Bool.true
    else if U16.btw('0', chr, '9') then Bool.true
    else if U16.eql('.', chr)      then Bool.true
    else if U16.eql('_', chr)      then Bool.true
    else if U16.eql('^', chr)      then Bool.true
    else                                Bool.false)

Litereum.parse.term(world: Litereum.World): Parser<Litereum.Term>
 Parser.choice!([
    Litereum.parse.term.let(world)
    Litereum.parse.term.create(world)
    Litereum.parse.term.match(world)
    Litereum.parse.term.word(world)
    Litereum.parse.term.compare(world)
    Litereum.parse.term.operate(world)
    Litereum.parse.term.bind(world)
    Litereum.parse.term.call(world)
    Litereum.parse.term.var(world)
 ])

Litereum.parse.term.let(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("let")
    get name = Litereum.parse.name
    Litereum.parse.text(":")
    get type = Litereum.parse.type(world)
    Litereum.parse.text("=")
    get expr = Litereum.parse.term(world)
    Parser.maybe!(Litereum.parse.text(";"))
    get body = Litereum.parse.term(world)
    return Litereum.Term.let(name, type, expr, body)
 }

Litereum.parse.term.create(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    get ctor = Litereum.parse.name
    get vals = Parser.wrap!(
      Litereum.parse.text("{")
      Litereum.parse.term(world)
      Litereum.parse.text("}"))
    return Litereum.Term.create(ctor, vals)
 }

Litereum.parse.term.match(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("case ")
    get name = Litereum.parse.name
    Litereum.parse.text(":")
    get data_name = Litereum.parse.name
    case Litereum.get_data(world, data_name) as found {
      none: Parser.fail!("Type not found.")
      some: Parser {
        use data = found.value
        Litereum.parse.text("{")
        get cses = Litereum.parse.term.match.cases(world, data.constructors)
        Litereum.parse.text("}")
        return Litereum.Term.match(name, data_name, cses)
      }
    }
  }

Litereum.parse.term.match.cases(
  world: Litereum.World
  constructors: List<Litereum.Constructor>
): Parser<List<Litereum.Term>>
 case constructors {
   nil: Parser {
     return []
   }
   cons: Parser {
     use ctor = constructors.head
     Litereum.parse.text(ctor.name)
     Litereum.parse.text(":")
     get head = Litereum.parse.term(world)
     Parser.maybe!(Litereum.parse.text(","))
     get tail = Litereum.parse.term.match.cases(world, constructors.tail)
     return head & tail
   }
 }

Litereum.parse.term.word(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("#")
    get num = Parser.nat
    if Nat.gte(num,Nat.pow(2,64)) then
      Parser.fail!("Number out of bound")
    else Parser {
      return Litereum.Term.word(Nat.to_u64(num))
    }
  }

Litereum.parse.term.compare(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("compare")
    get val0 = Litereum.parse.term(world)
    Litereum.parse.text(" ")
    get val1 = Litereum.parse.term(world)
    Litereum.parse.text("{")
    Litereum.parse.text("_<_:")
    get iflt = Litereum.parse.term(world)
    Litereum.parse.text("_=_:")
    get ifeq = Litereum.parse.term(world)
    Litereum.parse.text("_>_:")
    get ifgt = Litereum.parse.term(world)
    Litereum.parse.text("}")
    return Litereum.Term.compare(val0, val1, iflt, ifeq, ifgt)
  }

Litereum.parse.term.operate(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    get oper = Litereum.parse.term.operation
    case oper {
      none: Parser.fail!("Not an operation.")
      some: Parser {
        Litereum.parse.text("(")
        get val0 = Litereum.parse.term(world)
        Parser.maybe!(Litereum.parse.text(","))
        get val1 = Litereum.parse.term(world)
        Litereum.parse.text(")")
        return Litereum.Term.operate(oper.value, val0, val1)
      }
    }
  }

Litereum.parse.term.operation: Parser<Maybe<Litereum.Operation>>
  Parser.choice!([
    Parser {
      Litereum.parse.text("+")
      return some(Litereum.Operation.add)
    }
    Parser {
      Litereum.parse.text("-")
      return some(Litereum.Operation.sub)
    }
    Parser {
      Litereum.parse.text("*")
      return some(Litereum.Operation.mul)
    }
    Parser {
      Litereum.parse.text("/")
      return some(Litereum.Operation.div)
    }
    Parser {
      Litereum.parse.text("%")
      return some(Litereum.Operation.mod)
    }
    Parser {
      Litereum.parse.text("|")
      return some(Litereum.Operation.or)
    }
    Parser {
      Litereum.parse.text("&")
      return some(Litereum.Operation.and)
    }
    Parser {
      Litereum.parse.text("^")
      return some(Litereum.Operation.xor)
    }
    Parser {
      return none
    }
  ])

Litereum.parse.term.bind(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    Litereum.parse.text("bind")
    get name = Litereum.parse.name
    Litereum.parse.text("{")
    get main = Litereum.parse.term(world)
    Litereum.parse.text("}")
    get body = Litereum.parse.term(world)
    return Litereum.Term.bind(name, main, body)
  }

Litereum.parse.term.call(world: Litereum.World): Parser<Litereum.Term>
  Parser {
    get ctor = Litereum.parse.name
    get args = Parser.wrap!(
      Litereum.parse.text("(")
      Litereum.parse.term(world)
      Litereum.parse.text(")"))
    return Litereum.Term.call(ctor, args)
 }

Litereum.parse.term.var(
  world: Litereum.World
): Parser<Litereum.Term>
 Parser {
   get name = Litereum.parse.name
   return Litereum.Term.var(name)
 }

Litereum.parse.type(
  world: Litereum.World
): Parser<Litereum.Type>
  Parser.choice!([
    Parser {
      Litereum.parse.text("#word")
      return Litereum.Type.word
    }
    Parser {
      get name = Litereum.parse.name
      return Litereum.Type.data(name)
    }
  ])

Litereum.parse.data(world: Litereum.World): Parser<Litereum.Data>
  Parser {
    get name = Litereum.parse.name
    get ctors = Parser.wrap!(
      Litereum.parse.text("{")
      Parser {
        Parser.maybe!(Litereum.parse.text(","))
        Litereum.parse.constructor(world)
      }
      Litereum.parse.text("}")
    )
    return Litereum.Data.new(name, ctors)
  }
  
Litereum.parse.constructor(world: Litereum.World): Parser<Litereum.Constructor>
 Parser {
   get name = Litereum.parse.name
   get fields = Parser.wrap!(
      Litereum.parse.text("{")
      Litereum.parse.ann(world)
      Litereum.parse.text("}"))
   let nams = List.mapped!(fields)!((x) x@fst)
   let typs = List.mapped!(fields)!((x) x@snd)
   return Litereum.Constructor.new(name, nams, typs)
 }

Litereum.parse.bond(world: Litereum.World): Parser<Litereum.Bond>
  Parser {
    get ownr = Parser.many!(Parser {
      Litereum.parse.text("@")
      get name = Litereum.parse.name
      return name
    })
    get name = Litereum.parse.name
    get args = Parser.wrap!(
      Litereum.parse.text("(")
      Litereum.parse.ann(world)
      Litereum.parse.text(")"))
    let iarg = List.mapped!(args)!((x) x@fst)
    let ityp = List.mapped!(args)!((x) x@snd)
    Litereum.parse.text(":")
    get otyp = Litereum.parse.type(world)
    Litereum.parse.text("{")
    get main = Litereum.parse.term(world)
    Litereum.parse.text("}")
    return Litereum.Bond.new(name, ownr, iarg, ityp, otyp, main)
 }

Litereum.parse.ann(world: Litereum.World): Parser<Pair<String,Litereum.Type>>
 Parser {
    Parser.maybe!(Litereum.parse.text(","))
    get name = Litereum.parse.name
    Litereum.parse.text(":")
    get type = Litereum.parse.type(world)
    return {name, type}
 }

Litereum.parse.eval(world: Litereum.World): Parser<Litereum.Eval>
  Parser {
    Litereum.parse.text("{")
    get term = Litereum.parse.term(world)
    Litereum.parse.text("}")
    Litereum.parse.text(":")
    get type = Litereum.parse.type(world)
    return Litereum.Eval.new(term, type)
  }

Litereum.parse.transaction(world: Litereum.World): Parser<Litereum.Transaction>
  Parser.choice!([
    Parser {
      Litereum.parse.text("name")
      get name = Litereum.parse.name
      return Litereum.Transaction.new_name(name)
    }
    Parser {
      Litereum.parse.text("type")
      get data = Litereum.parse.data(world)
      return Litereum.Transaction.new_data(data)
    }
    Parser {
      Litereum.parse.text("bond")
      get bond = Litereum.parse.bond(world)
      return Litereum.Transaction.new_bond(bond)
    }
    Parser {
      Litereum.parse.text("eval")
      get term = Litereum.parse.eval(world)
      return Litereum.Transaction.new_eval(term)
    }
  ])

Litereum.parse.block(world: Litereum.World): Parser<List<Litereum.Transaction>>
  Parser.choice!([
    Parser {
      get transaction = Litereum.parse.transaction(world)
      get block_rest = Litereum.parse.block(Litereum.reg(world,transaction))
      return transaction & block_rest
    }
    Parser {
      Litereum.parse.ignore
      Parser.eof
      return []
    }
  ])

// Testing
// -------

Litereum: _
  let world = Litereum.genesis
  let code = `
    name Bool
    name true
    name false
    name Nat
    name zero
    name succ
    name pred
    name x
    name y
    name not
    name and
    name or
    name double
    name get_count
    name inc_count

    eval {
      #50
    } : #word

    type Bool {
      true{}
      false{}
    }

    type Nat {
      zero{}
      succ{pred: Nat}
    }

    eval {
      +(#10, #20)
    } : #word

    bond and(x: Bool, y: Bool): Bool {
      case x : Bool {
        true: y
        false: false{}
      }
    }

    eval {
      and(true{} false{})
    } : Bool

    bond double(x: Nat): Nat {
      case x : Nat {
        zero: zero{}
        succ: succ{succ{double(x.pred)}}
      }
    }

    eval {
      double(succ{succ{succ{zero{}}}})
    } : Nat

    // x is used to test if we can rebind bonds with args
    bond get_count(x: #word): #word {
      +(#0, x)
    }

    bond inc_count(): #word {
      bind get_count {
        +(+(get_count(#0), #1), x)
      }
      #0
    }

    eval { inc_count() } : #word
    eval { inc_count() } : #word
    eval { inc_count() } : #word
    eval { inc_count() } : #word
    eval { get_count(#100) } : #word
  `

  let block = Parser.run!(Litereum.parse.block(world), code) abort IO.print("deu ruim")
  IO {
    log("Block: ")
    IO.print(Litereum.show.block(world, block))

    IO.print("Serialization:")
    let bits = Litereum.serialize.block(Litereum.genesis, block)
    IO.print("- " | Bits.hex.encode(bits))
    IO.print("")

    IO.print("Deserialization:")
    let {bits,block} = Litereum.deserialize.block(Litereum.genesis, bits)
    IO.print(Litereum.show.block(Litereum.genesis,block))

    log("Evaluation: ")
    let world = Litereum.run.block(world, block) abort IO.print("failed execution")
    IO.print("Done!")
  }
