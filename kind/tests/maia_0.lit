// Names
// =====

name a
name b
name c
name x
name y
name z
name Nat
name zero
name succ
name pred
name double
name get_count
name inc_count

// Types and Functions
// ===================

type Nat {
  zero{}
  succ{pred: Nat}
}

bond double(x: Nat): Nat {
  case x : Nat {
    zero: zero{}
    succ: succ{succ{double(x.pred)}}
  }
}

eval {
  double(succ{succ{succ{zero{}}}})
} : Nat

// Effects
// =======

bond get_count(): #word {
  #0
} @inc_count

bond inc_count(): & #word {
  bind get_count {
    +(get_count(), #1)
  }
  return #0
}

eval {
  run inc_count()
  run inc_count()
  run inc_count()
  return get_count()
} : & #word
